<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Realm</name>
    </assembly>
    <members>
        <member name="T:Realms.WovenAttribute">
            <summary>
            An attribute that indicates that a class has been woven. It is applied automatically by the RealmWeaver and should not be used manually.
            </summary>
        </member>
        <member name="M:Realms.WovenAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Realms.WovenAttribute"/> class.
            </summary>
            <param name="helperType">The type of the generated RealmObjectHelper for that class.</param>
        </member>
        <member name="T:Realms.WovenPropertyAttribute">
            <summary>
            An attribute that indicates that a property has been woven. It is applied automatically by the RealmWeaver and should not be used manually.
            </summary>
        </member>
        <member name="T:Realms.WovenAssemblyAttribute">
            <summary>
            An attribute that indicates that the assembly has been woven. It is applied automatically by the RealmWeaver and should not be used manually.
            </summary>
        </member>
        <member name="T:Realms.ExplicitAttribute">
             <summary>
             An attribute that prevents the decorated class from being included in Realm's default schema.
             </summary>
             <remarks>
             If applied at the assembly level, then all classes in that assembly will be considered explicit and will not be added to
             the default schema. To include explicit classes in a Realm's schema, you should include them in the
             <see cref="P:Realms.RealmConfigurationBase.ObjectClasses"/> array:
             <code>
             var config = new RealmConfiguration
             {
                 ObjectClasses = new[] { typeof(MyExplicitClass) }
             };
            
             var realm = Realm.GetInstance(config);
             </code>
             </remarks>
        </member>
        <member name="T:Realms.BacklinkAttribute">
             <summary>
             An attribute that indicates that the property it decorates is the inverse end of a relationship.
             </summary>
             <example>
             <code>
             class Dog : RealmObject
             {
                 // One to many relationship with Person.Dogs
                 public Person Owner { get; set; }
             }
            
             class Person : RealmObject
             {
                 [Backlink(nameof(Dog.Owner))]
                 public IQueryable&lt;Dog&gt; Dogs { get; }
            
                 // Many to many relationship with Hobby.PeopleWithThatHobby
                 public IList&lt;Hobby&gt; Hobbies { get; }
             }
            
             class Hobby : RealmObject
             {
                 [Backlink(nameof(Person.Hobbies))]
                 public IQueryable&lt;Person&gt; PeopleWithThatHobby { get; }
             }
             </code>
             </example>
        </member>
        <member name="M:Realms.BacklinkAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Realms.BacklinkAttribute"/> class.
            </summary>
            <param name="property">The property that is on the other end of the relationship.</param>
        </member>
        <member name="T:Realms.IgnoredAttribute">
            <summary>
            An attribute that indicates an ignored property. Ignored properties will not be persisted in the Realm.
            </summary>
        </member>
        <member name="M:Realms.IgnoredAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Realms.IgnoredAttribute"/> class.
            </summary>
        </member>
        <member name="T:Realms.IndexedAttribute">
            <summary>
            An attribute that indicates an indexed property. Indexed properties slightly slow down insertions,
            but can greatly speed up queries.
            </summary>
        </member>
        <member name="M:Realms.IndexedAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Realms.IndexedAttribute"/> class.
            </summary>
        </member>
        <member name="T:Realms.MapToAttribute">
            <summary>
            An attribute that indicates that a property should be persisted under a different name.
            </summary>
            <remarks>
            This is useful when opening a Realm across different bindings where code style conventions might differ.
            </remarks>
        </member>
        <member name="P:Realms.MapToAttribute.Mapping">
            <summary>
            Gets the name of the property in the database.
            </summary>
            <value>The property name.</value>
        </member>
        <member name="M:Realms.MapToAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Realms.MapToAttribute"/> class.
            </summary>
            <param name="mapping">The name of the property in the database.</param>
        </member>
        <member name="T:Realms.PreserveAttribute">
            <summary>
            Prevents the Xamarin managed linker from linking the target.
            </summary>
        </member>
        <member name="F:Realms.PreserveAttribute.AllMembers">
            <summary>
            When used on a class rather than a property, ensures that all members of this type are preserved.
            </summary>
        </member>
        <member name="F:Realms.PreserveAttribute.Conditional">
            <summary>
            Flags the method as a method to preserve during linking if the container class is pulled in.
            </summary>
        </member>
        <member name="M:Realms.PreserveAttribute.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Realms.PreserveAttribute"/> class.
            </summary>
            <param name="allMembers">If set to <c>true</c> all members will be preserved.</param>
            <param name="conditional">If set to <c>true</c>, the method will only be preserved if the container class is preserved.</param>
        </member>
        <member name="M:Realms.PreserveAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Realms.PreserveAttribute"/> class.
            </summary>
        </member>
        <member name="T:Realms.PrimaryKeyAttribute">
            <summary>
            An attribute that indicates the primary key property. It allows quick lookup of objects and enforces uniqueness of the values stored. It may only be applied to a single property in a class.
            </summary>
            <remarks>
            Only char, integral types, and strings can be used as primary keys.
            Once an object with a Primary Key has been added to the Realm, that property may not be changed.
            </remarks>
        </member>
        <member name="M:Realms.PrimaryKeyAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Realms.PrimaryKeyAttribute"/> class.
            </summary>
        </member>
        <member name="T:Realms.RequiredAttribute">
            <summary>
            An attribute that indicates a required property. When persisting, the Realm will validate that the value of the property is not null.
            </summary>
        </member>
        <member name="M:Realms.RequiredAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Realms.RequiredAttribute"/> class.
            </summary>
        </member>
        <member name="T:Realms.Sync.FullSyncConfiguration">
            <summary>
            A <see cref="T:Realms.Sync.FullSyncConfiguration"/> is used to setup a <see cref="T:Realms.Realm"/> that can be synchronized
            in "full" mode between devices using the Realm Object Server. The entirety of the Realm will be kept
            in sync between the server and the client.
            </summary>
            <seealso href="https://docs.realm.io/platform/using-synced-realms/syncing-data#full-synchronization">
            Full Synchronization docs.
            </seealso>
            <seealso cref="T:Realms.Sync.QueryBasedSyncConfiguration"/>
        </member>
        <member name="P:Realms.Sync.FullSyncConfiguration.ClientResyncMode">
            <summary>
            Gets or sets a value controlling the behavior in case of a Client Resync. Default is <see cref="F:Realms.Sync.ClientResyncMode.RecoverLocalRealm"/>
            </summary>
        </member>
        <member name="M:Realms.Sync.FullSyncConfiguration.#ctor(System.Uri,Realms.Sync.User,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Realms.Sync.FullSyncConfiguration"/> class.
            </summary>
            <param name="serverUri">
            A unique <see cref="T:System.Uri"/> that identifies the Realm. In URIs, <c>~</c> can be used as a placeholder for a user Id.
            If a relative Uri is provided, it will be resolved using the user's <see cref="P:Realms.Sync.User.ServerUri"/> as baseUri.
            </param>
            <param name="user">
            A valid <see cref="T:Realms.Sync.User"/>. If not provided, the currently logged-in user will be used.
            </param>
            <param name="optionalPath">
            Path to the realm, must be a valid full path for the current platform, relative subdirectory, or just filename.
            </param>
        </member>
        <member name="T:Realms.Sync.QueryBasedSyncConfiguration">
            <summary>
            A <see cref="T:Realms.Sync.QueryBasedSyncConfiguration"/> is used to setup a <see cref="T:Realms.Realm"/> that can be synchronized
            in "query-based" mode between devices using the Realm Object Server. Only objects that match the subscribed
            queries will be synchronized to the client.
            </summary>
            <seealso href="https://docs.realm.io/platform/using-synced-realms/syncing-data#using-query-based-synchronization">
            Query-based Synchronization docs.
            </seealso>
            <seealso cref="T:Realms.Sync.FullSyncConfiguration"/>
            <see cref="M:Realms.Sync.Subscription.Subscribe``1(System.Linq.IQueryable{``0},System.String)"/>
        </member>
        <member name="M:Realms.Sync.QueryBasedSyncConfiguration.#ctor(System.Uri,Realms.Sync.User,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Realms.Sync.QueryBasedSyncConfiguration"/> class.
            </summary>
            <param name="serverUri">
            A unique <see cref="T:System.Uri"/> that identifies the Realm. In URIs, <c>~</c> can be used as a placeholder for a user Id.
            If a relative Uri is provided, it will be resolved using the user's <see cref="P:Realms.Sync.User.ServerUri"/> as baseUri.
            If <c>null</c> is passed, a Uri will be constructed from the user's <see cref="P:Realms.Sync.User.ServerUri"/>, combined with
            <c>/default</c>.
            </param>
            <param name="user">
            A valid <see cref="T:Realms.Sync.User"/>. If not provided, the currently logged-in user will be used.
            </param>
            <param name="optionalPath">
            Path to the realm, must be a valid full path for the current platform, relative subdirectory, or just filename.
            </param>
        </member>
        <member name="T:Realms.Sync.SyncConfigurationBase">
            <summary>
            A <see cref="T:Realms.Sync.SyncConfigurationBase"/> is used to setup a <see cref="T:Realms.Realm"/> that can be synchronized between devices using the
            Realm Object Server.
            </summary>
            <seealso cref="M:Realms.Sync.User.LoginAsync(Realms.Sync.Credentials,System.Uri)"/>
            <seealso cref="T:Realms.Sync.Credentials"/>
            <seealso cref="T:Realms.Sync.FullSyncConfiguration"/>
            <seealso cref="T:Realms.Sync.QueryBasedSyncConfiguration"/>
        </member>
        <member name="P:Realms.Sync.SyncConfigurationBase.ServerUri">
            <summary>
            Gets the <see cref="T:System.Uri"/> used to create this <see cref="T:Realms.Sync.SyncConfigurationBase"/>.
            </summary>
            <value>The <see cref="T:System.Uri"/> where the Realm Object Server is hosted.</value>
        </member>
        <member name="P:Realms.Sync.SyncConfigurationBase.User">
            <summary>
            Gets the <see cref="P:Realms.Sync.SyncConfigurationBase.User"/> used to create this <see cref="T:Realms.Sync.SyncConfigurationBase"/>.
            </summary>
            <value>The <see cref="P:Realms.Sync.SyncConfigurationBase.User"/> whose <see cref="T:Realms.Realm"/>s will be synced.</value>
        </member>
        <member name="P:Realms.Sync.SyncConfigurationBase.EnableSSLValidation">
            <summary>
            Gets or sets a value indicating whether SSL certificate validation is enabled for the connection associated
            with this configuration value.
            </summary>
            <value><c>true</c> if SSL validation is enabled; otherwise, <c>false</c>. Default value is <c>true</c>.</value>
        </member>
        <member name="P:Realms.Sync.SyncConfigurationBase.TrustedCAPath">
            <summary>
            Gets or sets the path to the trusted root certificate(s) authority (CA) in PEM format, that should
            be used to validate the TLS connections to the Realm Object Server.
            </summary>
            <value>The path to the certificate.</value>
            <remarks>
            The file will be copied at runtime into the internal storage.
            <br/>
            It is recommended to include only the root CA you trust, and not the entire list of root CA as this file
            will be loaded at runtime. It is your responsibility to download and verify the correct PEM for the root CA
            you trust.
            <br/>
            This property is ignored on Apple platforms - you should use the KeyChain API to install your certificate
            instead.
            </remarks>
            <seealso href="https://www.openssl.org/docs/man1.0.2/ssl/SSL_CTX_load_verify_locations.html">
            OpenSSL documentation for SSL_CTX_load_verify_locations.
            </seealso>
            <seealso href="https://ccadb-public.secure.force.com/mozilla/IncludedCACertificateReport">
            Mozilla Included CA Certificate List
            </seealso>
        </member>
        <member name="P:Realms.Sync.SyncConfigurationBase.OnProgress">
            <summary>
            Gets or sets a callback that is invoked when download progress is made when using <see cref="M:Realms.Realm.GetInstanceAsync(Realms.RealmConfigurationBase,System.Threading.CancellationToken)"/>.
            This will only be invoked for the initial download of the Realm and will not be invoked as futher download
            progress is made during the lifetime of the Realm. It is ignored when using
            <see cref="M:Realms.Realm.GetInstance(Realms.RealmConfigurationBase)"/>.
            </summary>
        </member>
        <member name="P:Realms.Sync.SyncConfigurationBase.LogLevel">
            <summary>
            Gets or sets a value indicating how detailed the sync client's logs will be.
            </summary>
        </member>
        <member name="P:Realms.Sync.SyncConfigurationBase.CustomLogger">
            <summary>
            Gets or sets a custom log function that will be invoked by Sync instead of writing
            to the standard error. This must be set before using any of the sync API.
            </summary>
            <remarks>
            This callback will not be invoked in a thread-safe manner, so it's up to the implementor to ensure
            that log messages arriving from multiple threads are processed without garbling the final output.
            </remarks>
            <value>The custom log function.</value>
        </member>
        <member name="P:Realms.Sync.SyncConfigurationBase.UserAgent">
            <summary>
            Gets or sets a string identifying this application which is included in the User-Agent
            header of sync connections.
            </summary>
            <remarks>
            This property must be set prior to opening a synchronized Realm for the first
            time. Any modifications made after opening a Realm will be ignored.
            </remarks>
            <value>
            The custom user agent that will be appended to the one generated by the SDK.
            </value>
        </member>
        <member name="M:Realms.Sync.SyncConfigurationBase.Initialize(Realms.Sync.UserPersistenceMode,System.Byte[],System.Boolean,System.String)">
            <summary>
            Configures various parameters of the sync system, such as the way users are persisted or the base
            path relative to which files will be saved.
            </summary>
            <param name="mode">The user persistence mode.</param>
            <param name="encryptionKey">The key to encrypt the persistent user store with.</param>
            <param name="resetOnError">If set to <c>true</c> reset the persistent user store on error.</param>
            <param name="basePath">The base folder relative to which Realm files will be stored.</param>
            <remarks>
            Users are persisted in a realm file within the application's sandbox.
            <para>
            By default <see cref="T:Realms.Sync.User"/> objects are persisted and are additionally protected with an encryption key stored
            in the iOS Keychain when running on an iOS device (but not on a Simulator).
            On Android users are persisted in plaintext, because the AndroidKeyStore API is only supported on API level 18 and up.
            You might want to provide your own encryption key on Android or disable persistence for security reasons.
            </para>
            </remarks>
        </member>
        <member name="M:Realms.Sync.SyncConfigurationBase.EnableSessionMultiplexing">
            <summary>
            Enable multiplexing multiple sync sessions over a single connection.
            </summary>
            <remarks>
            When having a lot of synchronized realms open, or when using <see cref="T:Realms.Server.Notifier"/>
            the system might run out of file descriptors because of all the open sockets to the server.
            Session multiplexing is designed to alleviate that, but it might not work with a server configured with fail-over.
            Only use if you're seeing errors about reaching the file descriptor limit and you know you are using many sync sessions.
            <para>
            Only call this method before opening any synchronized realms.
            </para>
            </remarks>
        </member>
        <member name="T:Realms.Sync.Exceptions.ClientResetException">
            <summary>
            An exception describing a condition where a reset of the local Realm is required.
            </summary>
        </member>
        <member name="P:Realms.Sync.Exceptions.ClientResetException.BackupFilePath">
            <summary>
            Gets the path where the backup copy of the realm will be placed once the client reset process is complete.
            </summary>
            <value>The path to the backup realm.</value>
        </member>
        <member name="M:Realms.Sync.Exceptions.ClientResetException.InitiateClientReset">
            <summary>
            Initiates the client reset process.
            </summary>
            <returns><c>true</c> if actions were run successfully, <c>false</c> otherwise.</returns>
            <remarks>
            On Windows, all Realm instances for that path must be disposed before this method is called or an
            Exception will be thrown.
            </remarks>
        </member>
        <member name="T:Realms.Sync.Exceptions.ErrorCode">
            <summary>
            Error code enumeration, indicating the type of the error.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.Unknown">
            <summary>
            Unrecognized error code. It usually indicates incompatibility between the authentication server and client SDK versions.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.SessionClosed">
            <summary>
            Session has been closed (no error).
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.OtherSessionError">
            <summary>
            Other session level error has occurred.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.AccessTokenExpired">
            <summary>
            Access token has already expired.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.BadUserAuthentication">
            <summary>
            Failed to authenticate user.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.IllegalRealmPath">
            <summary>
            Path to Realm is invalid.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.NoSuchRealm">
            <summary>
            Path points to non-existing Realm.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.PermissionDenied">
            <summary>
            Permission to Realm has been denied.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.BadServerFileIdentifier">
            <summary>
            The server file identifier is invalid.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.BadClientFileIdentifier">
            <summary>
            The client file identifier is invalid.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.BadServerVersion">
            <summary>
            The server version is invalid.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.BadClientVersion">
            <summary>
            The client version is invalid.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.DivergingHistories">
            <summary>
            Histories have diverged and cannot be merged.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.BadChangeset">
            <summary>
            The changeset is invalid.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.DisabledSession">
            <summary>
            The session has been disabled.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.InvalidParameters">
            <summary>
            Your request parameters did not validate.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.MissingParameters">
            <summary>
            Your request did not validate because of missing parameters.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.InvalidCredentials">
            <summary>
            The provided credentials are invalid.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.UnknownAccount">
            <summary>
            The account does not exist.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.ExistingAccount">
            <summary>
            The account cannot be registered as it exists already.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.AccessDenied">
            <summary>
            The path is invalid or current user has no access.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.ExpiredRefreshToken">
            <summary>
            The refresh token is expired.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.InvalidHost">
            <summary>
            The server is not authoritative for this URL.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.ExpiredPermissionOffer">
            <summary>
            The permission offer is expired.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.AmbiguousPermissionOfferToken">
            <summary>
            The token used on the permission request does match more than a single permission offer.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.FileMayNotBeShared">
            <summary>
            The Realm file at the specified path is not available for shared access.
            </summary>
        </member>
        <member name="T:Realms.Sync.Exceptions.ErrorCodeExtensions">
            <summary>
            A set of extensions that simplify checking for common error scenarios.
            </summary>
        </member>
        <member name="M:Realms.Sync.Exceptions.ErrorCodeExtensions.IsClientResetError(Realms.Sync.Exceptions.ErrorCode)">
            <summary>
            Checks if an error code indicates that a client reset is needed.
            </summary>
            <returns><c>true</c>, if the code indicates a client reset error, <c>false</c> otherwise.</returns>
            <param name="code">The error code.</param>
        </member>
        <member name="T:Realms.Sync.Exceptions.HttpException">
            <summary>
            An exception thrown when a transport error occurs during authentication.
            </summary>
        </member>
        <member name="P:Realms.Sync.Exceptions.HttpException.ErrorCode">
            <summary>
            Gets the <see cref="P:Realms.Sync.Exceptions.HttpException.ErrorCode"/> of the error.
            </summary>
            <value>An enum value indicating the error code.</value>
        </member>
        <member name="P:Realms.Sync.Exceptions.HttpException.StatusCode">
            <summary>
            Gets the <see cref="T:System.Net.HttpStatusCode"/> of the response.
            </summary>
            <value>A well known <see cref="T:System.Net.HttpStatusCode"/>.</value>
        </member>
        <member name="P:Realms.Sync.Exceptions.HttpException.ReasonPhrase">
            <summary>
            Gets the Reason-Phrase of the HTTP response.
            </summary>
            <value>The Reason-Phrase of the HTTP response.</value>
        </member>
        <member name="P:Realms.Sync.Exceptions.HttpException.Payload">
            <summary>
            Gets the body of the HTTP response.
            </summary>
            <value>The body of the HTTP response.</value>
        </member>
        <member name="T:Realms.Sync.Exceptions.IncompatibleSyncedFileException">
            <summary>
            An exception thrown when attempting to open an incompatible Synchronized Realm file. This usually happens
            when the Realm file was created with an older version of the SDK and automatic migration to the current version
            is not possible. When such an exception occurs, the original file is moved to a backup location and a new file is
            created instead. If you wish to migrate any data from the backup location, you can use <see cref="M:Realms.Sync.Exceptions.IncompatibleSyncedFileException.GetBackupRealmConfig(System.Byte[])"/>
            to obtain a <see cref="T:Realms.RealmConfigurationBase"/> that can then be used to open the backup Realm. After that, retry
            opening the original Realm file (which now should be recreated as an empty file) and copy all data from the backup
            file to the new one.
            </summary>
            <example>
            <code>
            var syncConfig = new SyncConfiguration(user, serverUri);
            try
            {
                var realm = Realm.GetInstance(syncConfig);
                // Do something if call was successful.
            }
            catch (IncompatibleSyncedFileException ex)
            {
                var backupConfig = ex.GetBackupRealmConfig();
                var backupRealm = Realm.GetInstance(backupConfig);
                var realm = Realm.GetInstance(syncConfig);
                realm.Write(() =>
                {
                    foreach (var item in backupRealm.All("MyItem"))
                    {
                        realm.Add(new MyItem
                        {
                            Value = item.Value,
                            ...
                        });
                    }
                });
            }
            </code>
            </example>
        </member>
        <member name="M:Realms.Sync.Exceptions.IncompatibleSyncedFileException.GetBackupRealmConfig(System.Byte[])">
            <summary>
            Gets a <see cref="T:Realms.RealmConfigurationBase"/> instance that can be used to open the backup Realm file.
            </summary>
            <param name="encryptionKey">Optional encryption key that was used to encrypt the original Realm file.</param>
            <returns>A configuration object for the backup Realm.</returns>
        </member>
        <member name="T:Realms.Sync.Exceptions.PermissionDeniedException">
            <summary>
            An error that indicates the user does not have permission to perform an operation
            upon a synced Realm. For example, a user may receive this error if they attempt to
            open a Realm they do not have at least read access to, or write to a Realm they only
            have read access to.
            <para />
            This error may also occur if a user incorrectly opens a Realm they have read-only
            permissions to without using the <see cref="M:Realms.Realm.GetInstanceAsync(Realms.RealmConfigurationBase,System.Threading.CancellationToken)"/> API.
            A Realm that suffers a permission denied error is, by default, flagged so that its
            local copy will be deleted the next time the application starts.
            <para />
            The <see cref="T:Realms.Sync.Exceptions.PermissionDeniedException"/> exposes a method that
            can be called with a single argument: <c>true</c> to immediately delete the Realm file,
            or <c>false</c> to not delete the file at all (either now or upon restart). This method
            should only be called with <c>true</c> if and when your app disposes of every
            instance of the offending Realm on all threads.
            </summary>
        </member>
        <member name="M:Realms.Sync.Exceptions.PermissionDeniedException.DeleteRealmUserInfo">
            <summary>
            A method that can be called to manually initiate or cancel the Realm file deletion process. If the method
            isn't called at all, the Realm file will be deleted the next time your application is launched and the
            sync subsystem is initialized. Can only be called once.
            </summary>
            <returns><c>true</c> if actions were run successfully, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Realms.Sync.Exceptions.SessionException">
            <summary>
            An exception type that describes a session-level error condition.
            </summary>
        </member>
        <member name="P:Realms.Sync.Exceptions.SessionException.ErrorCode">
            <summary>
            Gets the error code that describes the session error this exception represents.
            </summary>
            <value>An enum value, providing more detailed information for the cause of the error.</value>
        </member>
        <member name="T:Realms.Sync.RealmSyncExtensions">
            <summary>
            A set of extension methods that provide Sync-related functionality on top of Realm classes.
            </summary>
        </member>
        <member name="M:Realms.Sync.RealmSyncExtensions.GetSession(Realms.Realm)">
            <summary>
            Gets the <see cref="T:Realms.Sync.Session"/> for the realm file behind this <see cref="T:Realms.Realm"/>.
            </summary>
            <returns>The <see cref="T:Realms.Sync.Session"/> that is responsible for synchronizing with a Realm Object Server instance.</returns>
            <param name="realm">An instance of the <see cref="T:Realms.Realm"/> class created with a <see cref="T:Realms.Sync.SyncConfigurationBase"/> object.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <c>realm</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the <c>realm</c> was not created with a <see cref="T:Realms.Sync.SyncConfigurationBase"/> object.</exception>
        </member>
        <member name="T:Realms.Sync.Testing.TestingExtensions">
            <summary>
            A set of extension methods to be used in unit-testing scenarios. Should not be used in production.
            </summary>
        </member>
        <member name="M:Realms.Sync.Testing.TestingExtensions.SimulateError(Realms.Sync.Session,Realms.Sync.Exceptions.ErrorCode,System.String,System.Boolean)">
            <summary>
            Simulates a session error.
            </summary>
            <param name="session">The session where the simulated error will occur.</param>
            <param name="errorCode">Error code.</param>
            <param name="message">Error message.</param>
            <param name="isFatal">If set to <c>true</c> the error will be marked as fatal.</param>
            <remarks>
            Use this method to test your error handling code without connecting to a Realm Object Server.
            Some error codes, such as <see cref="F:Realms.Sync.Exceptions.ErrorCode.OtherSessionError"/> will be ignored and will not be reported
            to <see cref="E:Realms.Sync.Session.Error"/> subscribers.
            </remarks>
        </member>
        <member name="T:Realms.Sync.ClientResyncMode">
            <summary>
            Enum describing what should happen in case of a Client Resync.
            </summary>
            <remarks>
            A Client Resync is triggered if the device and server cannot agree on a common shared history
            for the Realm file, thus making it impossible for the device to upload or receive any changes.
            This can happen if the server is rolled back or restored from backup.
            <br/>
            IMPORTANT: Just having the device offline will not trigger a Client Resync.
            </remarks>
        </member>
        <member name="F:Realms.Sync.ClientResyncMode.RecoverLocalRealm">
            <summary>
            Realm will compare the local Realm with the Realm on the server and automatically transfer
            any changes from the local Realm that makes sense to the Realm provided by the server.
            <br/>
            This is the default mode for fully synchronized Realms. It is not yet supported by
            Query-based Realms.
            </summary>
        </member>
        <member name="F:Realms.Sync.ClientResyncMode.DiscardLocalRealm">
            <summary>
            The local Realm will be discarded and replaced with the server side Realm.
            All local changes will be lost.
            <br/>
            This mode is not yet supported by Query-based Realms.
            </summary>
        </member>
        <member name="F:Realms.Sync.ClientResyncMode.Manual">
            <summary>
            A manual Client Resync is also known as a Client Reset.
            <br/>
            A <see cref="T:Realms.Sync.Exceptions.ClientResetException"/> will be sent to <see cref="E:Realms.Sync.Session.Error"/>,
            triggering a Client Reset. Doing this provides a handle to both the old and new Realm file, enabling
            full control over which changes to move, if any.
            <br/>
            This is the only supported mode for Query-based Realms.
            </summary>
        </member>
        <member name="T:Realms.Sync.Credentials">
            <summary>
            A class, representing the credentials used for authenticating a <see cref="T:Realms.Sync.User"/>.
            </summary>
        </member>
        <member name="M:Realms.Sync.Credentials.Custom(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates an instance of <see cref="T:Realms.Sync.Credentials"/> with a custom provider and user identifier.
            </summary>
            <param name="identityProvider">Provider used to verify the credentials.</param>
            <param name="userIdentifier">String identifying the user. Usually a username of id.</param>
            <param name="userInfo">Data describing the user further or null if the user does not have any extra data. The data will be serialized to JSON, so all values must be mappable to a valid JSON data type.</param>
            <returns>An instance of <see cref="T:Realms.Sync.Credentials"/> that can be used in <see cref="M:Realms.Sync.User.LoginAsync(Realms.Sync.Credentials,System.Uri)"/></returns>
        </member>
        <member name="M:Realms.Sync.Credentials.Facebook(System.String)">
            <summary>
            Creates <see cref="T:Realms.Sync.Credentials"/> based on a Facebook login.
            </summary>
            <param name="facebookToken">A Facebook authentication token, obtained by logging into Facebook.</param>
            <returns>An instance of <see cref="T:Realms.Sync.Credentials"/> that can be used in <see cref="M:Realms.Sync.User.LoginAsync(Realms.Sync.Credentials,System.Uri)"/></returns>
        </member>
        <member name="M:Realms.Sync.Credentials.Google(System.String)">
            <summary>
            Creates <see cref="T:Realms.Sync.Credentials"/> based on a Google login.
            </summary>
            <param name="googleToken">A Google authentication token, obtained by logging into Google.</param>
            <returns>An instance of <see cref="T:Realms.Sync.Credentials"/> that can be used in <see cref="M:Realms.Sync.User.LoginAsync(Realms.Sync.Credentials,System.Uri)"/></returns>
        </member>
        <member name="M:Realms.Sync.Credentials.UsernamePassword(System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Creates <see cref="T:Realms.Sync.Credentials"/> based on a login with a username and a password.
            </summary>
            <param name="username">The username of the user.</param>
            <param name="password">The user's password.</param>
            <param name="createUser"><c>true</c> if the user should be created, <c>false</c> otherwise. It is not possible to create a user twice when logging in, so this flag should only be set to true the first time a user logs in.</param>
            <returns>An instance of <see cref="T:Realms.Sync.Credentials"/> that can be used in <see cref="M:Realms.Sync.User.LoginAsync(Realms.Sync.Credentials,System.Uri)"/></returns>
        </member>
        <member name="M:Realms.Sync.Credentials.Anonymous">
            <summary>
            Creates <see cref="T:Realms.Sync.Credentials"/> for an anonymous user. These can only be used once - using them a second
            time will result in a different user being logged in. If you need to get a user that has already logged
            in with the Anonymous credentials, use <see cref="P:Realms.Sync.User.Current"/> or <see cref="P:Realms.Sync.User.AllLoggedIn"/>.
            </summary>
            <returns>
            An instance of <see cref="T:Realms.Sync.Credentials"/> that can be used in <see cref="M:Realms.Sync.User.LoginAsync(Realms.Sync.Credentials,System.Uri)"/>
            </returns>
        </member>
        <member name="M:Realms.Sync.Credentials.Nickname(System.String)">
            <summary>
            Creates <see cref="T:Realms.Sync.Credentials"/> based on a login with a nickname. If multiple users try to login
            with the same nickname, they'll get the same underlying sync user.
            </summary>
            <param name="value">The nickname of the user.</param>
            <returns>
            An instance of <see cref="T:Realms.Sync.Credentials"/> that can be used in <see cref="M:Realms.Sync.User.LoginAsync(Realms.Sync.Credentials,System.Uri)"/>
            </returns>
        </member>
        <member name="M:Realms.Sync.Credentials.AzureAD(System.String)">
            <summary>
            Creates <see cref="T:Realms.Sync.Credentials"/> based on an Active Directory login.
            </summary>
            <param name="adToken">An access token, obtained by logging into Azure Active Directory.</param>
            <returns>An instance of <see cref="T:Realms.Sync.Credentials"/> that can be used in <see cref="M:Realms.Sync.User.LoginAsync(Realms.Sync.Credentials,System.Uri)"/></returns>
        </member>
        <member name="M:Realms.Sync.Credentials.JWT(System.String,System.String)">
            <summary>
            Creates <see cref="T:Realms.Sync.Credentials"/> based on a JWT access token.
            </summary>
            <param name="token">A Json Web Token, obtained by logging into your auth service.</param>
            <param name="providerName">
            The name of the jwt provider in ROS. By default, it will be jwt, unless explicitly overridden
            by the ROS configuration.
            </param>
            <returns>An instance of <see cref="T:Realms.Sync.Credentials"/> that can be used in <see cref="M:Realms.Sync.User.LoginAsync(Realms.Sync.Credentials,System.Uri)"/></returns>
        </member>
        <member name="M:Realms.Sync.Credentials.CustomRefreshToken(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="T:Realms.Sync.Credentials"/> based on a custom Refresh token.
            </summary>
            <param name="token">A Json Web Token, obtained by a 3rd party source that will be used instead of the ROS-issued refresh tokens.</param>
            <param name="userId">
            The identity of the user. This value is used for client side validation only as the server will compute its own
            value based on the <c>userIdFieldName</c> configuration. It is still important for proper functioning of the system
            that these values match.
            </param>
            <param name="isAdmin">
            A value indicating whether the user is an admin. This value is used for client side validation only as the server
            will compute its own value based on the <c>isAdminQuery</c> configuration. It is still important for proper
            functioning of the system that these values match.</param>
            <remarks>
            Unlike other <see cref="T:Realms.Sync.Credentials"/> methods, users logged in via the CustomRefreshToken API will not go through the regular
            login flow (since we already have a refresh token). Instead, the provided token will be used at any point when we need to exchange
            the refresh token for an access token, e.g. when opening a Realm file. If the refresh token is invalid or expired, the user instance
            will still be valid and they'll be able to create/open Realms, but those will never be synchronized with ROS. If the token is then updated
            with a new valid one, existing changes will be synchronized with the server as usual.
            <para/>
            To update a refresh token, just set <see cref="P:Realms.Sync.User.RefreshToken"/> to the new updated value.
            <para/>
            ROS must be configured with <c>refreshTokenValidators</c> for this user to ever be able to sync with it.
            </remarks>
            <returns>An instance of <see cref="T:Realms.Sync.Credentials"/> that can be used in <see cref="M:Realms.Sync.User.LoginAsync(Realms.Sync.Credentials,System.Uri)"/></returns>
        </member>
        <member name="P:Realms.Sync.Credentials.IdentityProvider">
            <summary>
            Gets the identity provider for the credentials.
            </summary>
            <value>The identity provider, such as Google, Facebook, etc.</value>
        </member>
        <member name="P:Realms.Sync.Credentials.Token">
            <summary>
            Gets the access token.
            </summary>
            <value>The access token.</value>
        </member>
        <member name="P:Realms.Sync.Credentials.UserInfo">
            <summary>
            Gets additional user information associated with the credentials.
            </summary>
            <value>A dictionary, containing the additional information.</value>
        </member>
        <member name="T:Realms.Sync.AccountInfo">
            <summary>
            An object containing information about an account associated with a user.
            </summary>
        </member>
        <member name="P:Realms.Sync.AccountInfo.Provider">
            <summary>
            Gets the provider that manages this user account.
            </summary>
        </member>
        <member name="P:Realms.Sync.AccountInfo.ProviderUserIdentity">
            <summary>
            Gets the user account's identity in the provider's system.
            </summary>
        </member>
        <member name="T:Realms.Sync.UserInfo">
            <summary>
            An object containing information about a user's identity in Realm's authentication system.
            </summary>
        </member>
        <member name="P:Realms.Sync.UserInfo.Identity">
            <summary>
            Gets the identity of the user in Realm's system. Equivalent to <see cref="P:Realms.Sync.User.Identity"/>.
            </summary>
        </member>
        <member name="P:Realms.Sync.UserInfo.IsAdmin">
            <summary>
            Gets a value indicating whether the user is a Realm Object Server administrator user. Equivalent to <see cref="P:Realms.Sync.User.IsAdmin"/>.
            </summary>
        </member>
        <member name="P:Realms.Sync.UserInfo.Accounts">
            <summary>
            Gets a collection of all the user accounts associated with the user.
            </summary>
        </member>
        <member name="P:Realms.Sync.UserInfo.Metadata">
            <summary>
            Gets the metadata about this user stored on the Realm Object Server.
            </summary>
        </member>
        <member name="T:Realms.Sync.LogLevel">
            <summary>
            Specifies the criticality level above which messages will be logged
            by the default sync client logger.
            </summary>
        </member>
        <member name="F:Realms.Sync.LogLevel.All">
            <summary>
            Log everything. This will seriously harm the performance of the
            sync client and should never be used in production scenarios.
            </summary>
        </member>
        <member name="F:Realms.Sync.LogLevel.Trace">
            <summary>
            A version of 'debug' that allows for very high volume output.
            This may seriously affect the performance of the sync client.
            </summary>
        </member>
        <member name="F:Realms.Sync.LogLevel.Debug">
            <summary>
            Reveal information that can aid debugging, no longer paying
            attention to efficiency.
            </summary>
        </member>
        <member name="F:Realms.Sync.LogLevel.Detail">
            <summary>
            Same as 'Info', but prioritize completeness over minimalism.
            </summary>
        </member>
        <member name="F:Realms.Sync.LogLevel.Info">
            <summary>
            Log operational sync client messages, but in a minimalistic fashion to
            avoid general overhead from logging and to keep volume down.
            </summary>
        </member>
        <member name="F:Realms.Sync.LogLevel.Warn">
            <summary>
            Log errors and warnings.
            </summary>
        </member>
        <member name="F:Realms.Sync.LogLevel.Error">
            <summary>
            Log errors only.
            </summary>
        </member>
        <member name="F:Realms.Sync.LogLevel.Fatal">
            <summary>
            Log only fatal errors.
            </summary>
        </member>
        <member name="F:Realms.Sync.LogLevel.Off">
            <summary>
            Log nothing.
            </summary>
        </member>
        <member name="T:Realms.Sync.ClassPermission">
            <summary>
            An object which describes class-wide permissions.
            </summary>
            <remarks>
            An instance of this object is automatically created in the Realm for class in your schema,
            and should not be created manually. Call <see cref="M:Realms.Sync.ClassPermission.Get``1(Realms.Realm)"/> or
            <see cref="M:Realms.Sync.ClassPermission.Get(Realms.Realm,System.String)"/> to obtain the existing instance, or query
            <see cref="T:Realms.Sync.ClassPermission"/> as normal.
            </remarks>
        </member>
        <member name="P:Realms.Sync.ClassPermission.Name">
            <summary>
            Gets the name of the class which these permissions apply to.
            </summary>
        </member>
        <member name="P:Realms.Sync.ClassPermission.Permissions">
            <summary>
            Gets the permissions for this class.
            </summary>
        </member>
        <member name="M:Realms.Sync.ClassPermission.Get``1(Realms.Realm)">
            <summary>
            Retrieves the <see cref="T:Realms.Sync.ClassPermission"/> for the given
            <see cref="T:Realms.RealmObject"/> subclass. This will return <c>null</c> for Realms in full synchronization mode.
            </summary>
            <typeparam name="T">
            The <see cref="T:Realms.RealmObject"/> subclass whose corresponding <see cref="T:Realms.Sync.ClassPermission"/>
            will be obtained.
            </typeparam>
            <param name="realm">The Realm instance.</param>
            <returns>
            A <c>ClassPermission</c> instance that allows you to manipulate the permissions
            for this class.
            </returns>
        </member>
        <member name="M:Realms.Sync.ClassPermission.Get(Realms.Realm,System.String)">
            <summary>
            Retrieves the <see cref="T:Realms.Sync.ClassPermission"/> for the given class name.
            This will return <c>null</c> for Realms in full synchronization mode.
            </summary>
            <param name="realm">The Realm instance.</param>
            <param name="className">
            The name of a <see cref="T:Realms.RealmObject"/> subclass whose corresponding <see cref="T:Realms.Sync.ClassPermission"/>
            will be obtained.
            </param>
            <returns>
            A <c>ClassPermission</c> instance that allows you to manipulate the permissions
            for this class.
            </returns>
        </member>
        <member name="T:Realms.Sync.ClassPrivileges">
            <summary>
            A description of the actual privileges which apply to a Class within a Realm.
            </summary>
            <remarks>
            This is a combination of all of the privileges granted to all of the Roles which the
            current User is a member of, obtained by calling <see cref="M:Realms.Sync.PermissionExtensions.GetPrivileges(Realms.Realm,System.String)"/>
            or <see cref="M:Realms.Sync.PermissionExtensions.GetPrivileges``1(Realms.Realm)"/>.
            </remarks>
        </member>
        <member name="F:Realms.Sync.ClassPrivileges.Read">
            <summary>
            If this flag is not present, the current User is not permitted to see objects of this type,
            and attempting to query this class will always return empty results.
            </summary>
            <remarks>
            Note that Read permissions are transitive, and so it may be possible to read an
            object which the user does not directly have Read permissions for by following a
            link to it from an object they do have Read permissions for. This does not apply
            to any of the other permission types.
            </remarks>
        </member>
        <member name="F:Realms.Sync.ClassPrivileges.Update">
            <summary>
            If this flag is not present, no modifications to objects of this type are permitted. Write
            transactions modifying the objects can be performed locally, but any changes made
            will be reverted by the server.
            </summary>
            <remarks>
            Deleting an object is considered a modification, and is governed by this privilege.
            </remarks>
        </member>
        <member name="F:Realms.Sync.ClassPrivileges.SetPermissions">
            <summary>
            If this flag is not present, no modifications to the permissions property of the <see cref="T:Realms.Sync.ClassPermission"/>
            object for this type are permitted. Write transactions can be performed locally,
            but any changes made will be reverted by the server.
            </summary>
            <remarks>
            Note that if invalid privilege changes are made, <see cref="M:Realms.Sync.PermissionExtensions.GetPrivileges``1(Realms.Realm)"/>
            will return results reflecting those invalid changes until synchronization occurs.
            <para/>
            Even if this flag is present, note that the user will be unable to grant more
            privileges to a Role than what they have themselves, e.g. they won't be able to grant
            <see cref="F:Realms.Sync.ClassPrivileges.Update"/> if they haven't been granted <see cref="F:Realms.Sync.ClassPrivileges.Update"/> first.
            </remarks>
        </member>
        <member name="F:Realms.Sync.ClassPrivileges.Subscribe">
            <summary>
            If this flag is not present, the User is not permitted to create new subscriptions for this class.
            Local queries against the objects within the Realm will work, but new
            subscriptions will never add objects to the Realm.
            </summary>
        </member>
        <member name="F:Realms.Sync.ClassPrivileges.Create">
            <summary>
            If this flag is not present, creating new objects of this type is not permitted. Write transactions
            creating objects can be performed locally, but the objects will be deleted by the
            server when synchronization occurs.
            </summary>
            <remarks>
            For objects with Primary Keys, it may not be locally determinable if <see cref="F:Realms.Sync.ClassPrivileges.Create"/> or
            <see cref="F:Realms.Sync.ClassPrivileges.Update"/> privileges are applicable. It may appear that you are creating a new object,
            but an object with that Primary Key may already exist and simply not be visible to
            you, in which case it is actually an Update operation.
            </remarks>
        </member>
        <member name="T:Realms.Sync.NamedSubscription">
            <summary>
            A managed Realm object representing a subscription. Subscriptions are used by Query-based Realms to define which
            data should be available on the device. It is the persisted version of a <see cref="T:Realms.Sync.Subscription`1"/> created by
            calling <see cref="M:Realms.Sync.Subscription.Subscribe``1(System.Linq.IQueryable{``0},System.String)"/>.
            </summary>
        </member>
        <member name="P:Realms.Sync.NamedSubscription.Name">
            <summary>
            Gets the name of the subscription. If no name was provided in <see cref="P:Realms.Sync.SubscriptionOptions.Name"/>, then
            an automatic name will have been generated based on the query.
            </summary>
            <value>The subscription name.</value>
        </member>
        <member name="P:Realms.Sync.NamedSubscription.Query">
            <summary>
            Gets the string representation of the query used to create the subscription.
            </summary>
            <value>The subscription query.</value>
        </member>
        <member name="P:Realms.Sync.NamedSubscription.CreatedAt">
            <summary>
            Gets the point in time when the subscription was created.
            </summary>
            <value>The creation date of the subscription.</value>
        </member>
        <member name="P:Realms.Sync.NamedSubscription.UpdatedAt">
            <summary>
            Gets the point in time when the subscription was updated.
            </summary>
            <remarks>
            In this context,
            "updated" means that the subscription was resubscribed to or some property
            was updated by calling <see cref="!:Subscription.Subscribe&lt;T&gt;(IQueryable&lt;T&gt;, SubscriptionOptions)"/>.
            The field is NOT updated whenever the results of the query changes.
            </remarks>
            <value>The last updated date of the subscription.</value>
        </member>
        <member name="P:Realms.Sync.NamedSubscription.ExpiresAt">
            <summary>
            Gets the point in time when the subscription will expire and become eligible for removal.
            </summary>
            <remarks>
            Realm will automatically remove expired subscriptions at opportunistic times. There
            are no guarantees as to when the subscription will be removed.
            </remarks>
            <value>The expiration date of the subscription.</value>
        </member>
        <member name="P:Realms.Sync.NamedSubscription.TimeToLive">
            <summary>
            Gets the time to live of the subscription.
            </summary>
            <value>The subscription's time to live.</value>
        </member>
        <member name="P:Realms.Sync.NamedSubscription.State">
            <summary>
            Gets a value indicating the state of this subscription.
            </summary>
            <value>The state of the subscription.</value>
        </member>
        <member name="P:Realms.Sync.NamedSubscription.Error">
            <summary>
            Gets a value indicating what error (if any) has occurred while processing the subscription.
            If the <see cref="P:Realms.Sync.NamedSubscription.State"/> is not <see cref="F:Realms.Sync.SubscriptionState.Error"/>, this will be <c>null</c>.
            </summary>
            <value>An instance of <see cref="T:System.Exception"/> if an error has occurred; <c>null</c> otherwise.</value>
        </member>
        <member name="P:Realms.Sync.NamedSubscription.ObjectType">
            <summary>
            Gets the type of the object that this subscription is applied to.
            </summary>
            <value>The type of the object that the subscription matches.</value>
        </member>
        <member name="T:Realms.Sync.ObjectPrivileges">
            <summary>
            A description of the actual privileges which apply to a specific Object.
            </summary>
            <remarks>
            This is a combination of all of the privileges granted to all of the Roles which the
            current User is a member of, obtained by calling <see cref="M:Realms.Sync.PermissionExtensions.GetPrivileges(Realms.Realm,Realms.RealmObject)"/>
            </remarks>
        </member>
        <member name="F:Realms.Sync.ObjectPrivileges.Read">
            <summary>
            If this flag is not present, the current User is not permitted to read this object directly.
            </summary>
            <remarks>
            Note that Read permissions are transitive, and so it may be possible to read an
            object which the user does not directly have Read permissions for by following a
            link to it from an object they do have Read permissions for. This does not apply
            to any of the other permission types.
            </remarks>
        </member>
        <member name="F:Realms.Sync.ObjectPrivileges.Update">
            <summary>
            If this flag is not present, modifying the fields of this type is not permitted. Write
            transactions modifying the objects can be performed locally, but any changes made
            will be reverted by the server.
            </summary>
            <remarks>
            Note that even if the user has <see cref="F:Realms.Sync.ObjectPrivileges.Update"/> permission, they may not be able to
            modify the <c>IList&lt;Permission&gt;</c> property of the object (if it exists), as that is
            governed by <see cref="F:Realms.Sync.ObjectPrivileges.SetPermissions"/>.
            </remarks>
        </member>
        <member name="F:Realms.Sync.ObjectPrivileges.Delete">
            <summary>
            If this flag is not present, deleting this object is not permitted. Write transactions which
            delete the object can be performed locally, but the server will restore it.
            </summary>
            <remarks>
            It is possible to have <see cref="F:Realms.Sync.ObjectPrivileges.Update"/> but not <see cref="F:Realms.Sync.ObjectPrivileges.Delete"/> privileges, or vice
            versa. For objects with primary keys, <see cref="F:Realms.Sync.ObjectPrivileges.Delete"/> but not <see cref="F:Realms.Sync.ObjectPrivileges.Update"/> is ill-advised
            as an object can be updated by deleting and recreating it.
            </remarks>
        </member>
        <member name="F:Realms.Sync.ObjectPrivileges.SetPermissions">
            <summary>
            If this flag is not present, modifying the privileges of this specific object is not permitted.
            </summary>
            <remarks>
            Object-specific permissions are set by declaring an <c>IList&lt;Permission&gt;</c>
            property on the <see cref="T:Realms.RealmObject"/> subclass. Modifications to this property are
            controlled by <see cref="F:Realms.Sync.ObjectPrivileges.SetPermissions"/> rather than <see cref="F:Realms.Sync.ObjectPrivileges.Update"/>.
            <para/>
            Even if this flag is present, note that the user will be unable to grant more
            privileges to a Role than what they have themselves, e.g. they won't be able to grant
            <see cref="F:Realms.Sync.ObjectPrivileges.Update"/> if they haven't been granted <see cref="F:Realms.Sync.ObjectPrivileges.Update"/> first.
            </remarks>
        </member>
        <member name="T:Realms.Sync.Permission">
            <summary>
            A permission which can be applied to a Realm, Class, or specific Object.
            </summary>
            <remarks>
            Permissions are applied by adding the permission to the <see cref="T:Realms.Sync.RealmPermission"/> singleton
            object, the <see cref="T:Realms.Sync.ClassPermission"/> object for the desired class, or to a user-defined
            <c>IList&lt;Permission&gt;</c> property on a specific Object instance. The meaning of each of
            the properties of <see cref="T:Realms.Sync.Permission"/> depend on what the permission is applied to, and so are
            left undocumented here. See <see cref="T:Realms.Sync.RealmPrivileges"/>, <see cref="T:Realms.Sync.ClassPrivileges"/>, and
            <see cref="T:Realms.Sync.ObjectPrivileges"/> for details about what each of the properties mean when applied to
            that type.
            </remarks>
        </member>
        <member name="P:Realms.Sync.Permission.Role">
            <summary>
            Gets the Role which this Permission applies to. All users within the Role are
            granted the permissions specified by the fields below any
            objects/classes/realms which use this <see cref="T:Realms.Sync.Permission"/>.
            </summary>
        </member>
        <member name="P:Realms.Sync.Permission.CanRead">
            <summary>
            Gets or sets a value indicating whether the user can read the object to which this
            <see cref="T:Realms.Sync.Permission"/> is attached.
            </summary>
        </member>
        <member name="P:Realms.Sync.Permission.CanUpdate">
            <summary>
            Gets or sets a value indicating whether the user can modify the object to which this <see cref="T:Realms.Sync.Permission"/> is attached.
            </summary>
        </member>
        <member name="P:Realms.Sync.Permission.CanDelete">
            <summary>
            Gets or sets a value indicating whether the user can delete the object to which this <see cref="T:Realms.Sync.Permission"/> is attached.
            </summary>
            <remarks>
            This field is only applicable to Permissions attached to Objects, and not to Realms or Classes.
            </remarks>
        </member>
        <member name="P:Realms.Sync.Permission.CanSetPermissions">
            <summary>
            Gets or sets a value indicating whether the user can add or modify Permissions for the object which this
            <see cref="T:Realms.Sync.Permission"/> is attached to.
            </summary>
        </member>
        <member name="P:Realms.Sync.Permission.CanQuery">
            <summary>
            Gets or sets a value indicating whether the user can subscribe to queries for this object type.
            </summary>
            <remarks>
            This field is only applicable to Permissions attached to Classes, and not to Realms or Objects.
            </remarks>
        </member>
        <member name="P:Realms.Sync.Permission.CanCreate">
            <summary>
            Gets or sets a value indicating whether the user can create new objects of the type this <see cref="T:Realms.Sync.Permission"/> is attached to.
            </summary>
            <remarks>
            This field is only applicable to Permissions attached to Classes, and not to Realms or Objects.
            </remarks>
        </member>
        <member name="P:Realms.Sync.Permission.CanModifySchema">
            <summary>
            Gets or sets a value indicating whether the user can modify the schema of the Realm which this
            <see cref="T:Realms.Sync.Permission"/> is attached to.
            </summary>
            <remarks>
            This field is only applicable to Permissions attached to Realms, and not to Realms or Objects.
            </remarks>
        </member>
        <member name="M:Realms.Sync.Permission.Get(Realms.Sync.PermissionRole,Realms.Realm)">
            <summary>
            Gets or creates a <see cref="T:Realms.Sync.Permission"/> instance for the named role
            on the Realm.
            </summary>
            <remarks>
            This function should be used in preference to manually querying for the
            applicable Permission as it ensures that there is exactly one Permission for
            the given Role on the Realm, merging duplicates or creating and adding new ones
            as needed.
            </remarks>
            <param name="role">The <see cref="T:Realms.Sync.PermissionRole"/> associated with that Permission.</param>
            <param name="realm">The Realm whose permissions this <see cref="T:Realms.Sync.Permission"/> instance manipulates.</param>
            <returns>
            A <see cref="T:Realms.Sync.Permission"/> instance that can be used to inspect or modify the Realm
            permissions of that <see cref="T:Realms.Sync.PermissionRole"/>.
            </returns>
        </member>
        <member name="M:Realms.Sync.Permission.Get``1(Realms.Sync.PermissionRole,Realms.Realm)">
            <summary>
            Gets or creates a <see cref="T:Realms.Sync.Permission"/> instance for the named role
            on the class.
            </summary>
            <remarks>
            This function should be used in preference to manually querying for the
            applicable Permission as it ensures that there is exactly one Permission for
            the given Role on the class, merging duplicates or creating and adding new ones
            as needed.
            </remarks>
            <typeparam name="T">
            The <see cref="T:Realms.RealmObject"/> subclass whose corresponding class permissions this
            <see cref="T:Realms.Sync.Permission"/> instance manipulates.
            </typeparam>
            <param name="role">The <see cref="T:Realms.Sync.PermissionRole"/> associated with that Permission.</param>
            <param name="realm">The Realm whose class permissions this <see cref="T:Realms.Sync.Permission"/> instance manipulates.</param>
            <returns>
            A <see cref="T:Realms.Sync.Permission"/> instance that can be used to inspect or modify the class
            permissions of that <see cref="T:Realms.Sync.PermissionRole"/>.
            </returns>
        </member>
        <member name="M:Realms.Sync.Permission.Get(Realms.Sync.PermissionRole,System.String,Realms.Realm)">
            <summary>
            Gets or creates a <see cref="T:Realms.Sync.Permission"/> instance for the named role
            on the class.
            </summary>
            <remarks>
            This function should be used in preference to manually querying for the
            applicable Permission as it ensures that there is exactly one Permission for
            the given Role on the class, merging duplicates or creating and adding new ones
            as needed.
            </remarks>
            <param name="role">The <see cref="T:Realms.Sync.PermissionRole"/> associated with that Permission.</param>
            <param name="className">
            The  name of the <see cref="T:Realms.RealmObject"/> subclass whose corresponding class permissions this
            <see cref="T:Realms.Sync.Permission"/> instance manipulates.
            </param>
            <param name="realm">The Realm whose class permissions this <see cref="T:Realms.Sync.Permission"/> instance manipulates.</param>
            <returns>
            A <see cref="T:Realms.Sync.Permission"/> instance that can be used to inspect or modify the class
            permissions of that <see cref="T:Realms.Sync.PermissionRole"/>.
            </returns>
        </member>
        <member name="M:Realms.Sync.Permission.Get(Realms.Sync.PermissionRole,Realms.RealmObject)">
            <summary>
            Gets or creates a <see cref="T:Realms.Sync.Permission"/> instance for the named role
            on the object.
            </summary>
            <remarks>
            This function should be used in preference to manually querying for the
            applicable Permission as it ensures that there is exactly one Permission for
            the given Role on the object, merging duplicates or creating and adding new ones
            as needed.
            <para/>
            The given object must have a <c>IList&lt;Permission&gt;</c> property defined on it.
            If more than one such property exists, the first one will be used.
            </remarks>
            <param name="role">The <see cref="T:Realms.Sync.PermissionRole"/> associated with that Permission.</param>
            <param name="obj">
            The <see cref="T:Realms.RealmObject"/> inheritor whose permissions this
            <see cref="T:Realms.Sync.Permission"/> instance manipulates.
            </param>
            <returns>
            A <see cref="T:Realms.Sync.Permission"/> instance that can be used to inspect or modify the object
            permissions of that <see cref="T:Realms.Sync.PermissionRole"/>.
            </returns>
        </member>
        <member name="M:Realms.Sync.Permission.Get(System.String,Realms.Realm)">
            <summary>
            Gets or creates a <see cref="T:Realms.Sync.Permission"/> instance for the named role
            on the Realm.
            </summary>
            <remarks>
            This function should be used in preference to manually querying for the
            applicable Permission as it ensures that there is exactly one Permission for
            the given Role on the Realm, merging duplicates or creating and adding new ones
            as needed.
            </remarks>
            <param name="roleName">
            The name of the <see cref="T:Realms.Sync.PermissionRole"/> associated with that Permission. If no such
            Role exists, it will be created automatically.
            </param>
            <param name="realm">The Realm whose permissions this <see cref="T:Realms.Sync.Permission"/> instance manipulates.</param>
            <returns>
            A <see cref="T:Realms.Sync.Permission"/> instance that can be used to inspect or modify the Realm
            permissions of that <see cref="T:Realms.Sync.PermissionRole"/>.
            </returns>
        </member>
        <member name="M:Realms.Sync.Permission.Get``1(System.String,Realms.Realm)">
            <summary>
            Gets or creates a <see cref="T:Realms.Sync.Permission"/> instance for the named role
            on the class.
            </summary>
            <remarks>
            This function should be used in preference to manually querying for the
            applicable Permission as it ensures that there is exactly one Permission for
            the given Role on the class, merging duplicates or creating and adding new ones
            as needed.
            </remarks>
            <typeparam name="T">
            The <see cref="T:Realms.RealmObject"/> subclass whose corresponding class permissions this
            <see cref="T:Realms.Sync.Permission"/> instance manipulates.
            </typeparam>
            <param name="roleName">
            The name of the <see cref="T:Realms.Sync.PermissionRole"/> associated with that Permission. If no such
            Role exists, it will be created automatically.
            </param>
            <param name="realm">The Realm whose class permissions this <see cref="T:Realms.Sync.Permission"/> instance manipulates.</param>
            <returns>
            A <see cref="T:Realms.Sync.Permission"/> instance that can be used to inspect or modify the class
            permissions of that <see cref="T:Realms.Sync.PermissionRole"/>.
            </returns>
        </member>
        <member name="M:Realms.Sync.Permission.Get(System.String,System.String,Realms.Realm)">
            <summary>
            Gets or creates a <see cref="T:Realms.Sync.Permission"/> instance for the named role
            on the class.
            </summary>
            <remarks>
            This function should be used in preference to manually querying for the
            applicable Permission as it ensures that there is exactly one Permission for
            the given Role on the class, merging duplicates or creating and adding new ones
            as needed.
            </remarks>
            <param name="roleName">
            The name of the <see cref="T:Realms.Sync.PermissionRole"/> associated with that Permission. If no such
            Role exists, it will be created automatically.
            </param>
            <param name="className">
            The  name of the <see cref="T:Realms.RealmObject"/> subclass whose corresponding class permissions this
            <see cref="T:Realms.Sync.Permission"/> instance manipulates.
            </param>
            <param name="realm">The Realm whose class permissions this <see cref="T:Realms.Sync.Permission"/> instance manipulates.</param>
            <returns>
            A <see cref="T:Realms.Sync.Permission"/> instance that can be used to inspect or modify the class
            permissions of that <see cref="T:Realms.Sync.PermissionRole"/>.
            </returns>
        </member>
        <member name="M:Realms.Sync.Permission.Get(System.String,Realms.RealmObject)">
            <summary>
            Gets or creates a <see cref="T:Realms.Sync.Permission"/> instance for the named role
            on the object.
            </summary>
            <remarks>
            This function should be used in preference to manually querying for the
            applicable Permission as it ensures that there is exactly one Permission for
            the given Role on the object, merging duplicates or creating and adding new ones
            as needed.
            <para/>
            The given object must have a <c>IList&lt;Permission&gt;</c> property defined on it.
            If more than one such property exists, the first one will be used.
            </remarks>
            <param name="roleName">
            The name of the <see cref="T:Realms.Sync.PermissionRole"/> associated with that Permission. If no such
            Role exists, it will be created automatically.
            </param>
            <param name="obj">
            The <see cref="T:Realms.RealmObject"/> inheritor whose permissions this
            <see cref="T:Realms.Sync.Permission"/> instance manipulates.
            </param>
            <returns>
            A <see cref="T:Realms.Sync.Permission"/> instance that can be used to inspect or modify the object
            permissions of that <see cref="T:Realms.Sync.PermissionRole"/>.
            </returns>
        </member>
        <member name="M:Realms.Sync.Permission.Get(System.String,System.Collections.Generic.IList{Realms.Sync.Permission})">
            <summary>
            Gets or creates a <see cref="T:Realms.Sync.Permission"/> instance for the named role
            on the collection.
            </summary>
            <remarks>
            This function should be used in preference to manually querying for the
            applicable Permission as it ensures that there is exactly one Permission for
            the given Role on the object, merging duplicates or creating and adding new ones
            as needed.
            </remarks>
            <param name="roleName">
            The name of the <see cref="T:Realms.Sync.PermissionRole"/> associated with that Permission. If no such
            Role exists, it will be created automatically.
            </param>
            <param name="permissions">
            The collection of permissions to which the new instance will be added.
            </param>
            <returns>
            A <see cref="T:Realms.Sync.Permission"/> instance that can be used to inspect or modify the object
            permissions of that <see cref="T:Realms.Sync.PermissionRole"/>.
            </returns>
        </member>
        <member name="M:Realms.Sync.Permission.Get(Realms.Sync.PermissionRole,System.Collections.Generic.IList{Realms.Sync.Permission})">
            <summary>
            Gets or creates a <see cref="T:Realms.Sync.Permission"/> instance for the named role
            on the collection.
            </summary>
            <remarks>
            This function should be used in preference to manually querying for the
            applicable Permission as it ensures that there is exactly one Permission for
            the given Role on the object, merging duplicates or creating and adding new ones
            as needed.
            </remarks>
            <param name="role">The <see cref="T:Realms.Sync.PermissionRole"/> associated with that Permission.</param>
            <param name="permissions">
            The collection of permissions to which the new instance will be added.
            </param>
            <returns>
            A <see cref="T:Realms.Sync.Permission"/> instance that can be used to inspect or modify the object
            permissions of that <see cref="T:Realms.Sync.PermissionRole"/>.
            </returns>
        </member>
        <member name="T:Realms.Sync.PermissionExtensions">
            <summary>
            A set of extension methods that simplify working with object level permissions.
            </summary>
        </member>
        <member name="M:Realms.Sync.PermissionExtensions.GetPrivileges(Realms.Realm)">
            <summary>
            Returns the computed privileges which the current user has for this Realm.
            <para/>
            This combines all privileges granted on the Realm by all Roles which the
            current User is a member of into the final privileges which will be
            enforced by the server.
            <para/>
            The privilege calculation is done locally using cached data, and inherently
            may be stale.It is possible that this method may indicate that an
            operation is permitted but the server will still reject it if permission is
            revoked before the changes have been integrated on the server.
            <para/>
            Non-synchronized Realms always have permission to perform all operations.
            </summary>
            <param name="realm">The Realm whose privileges are inspected.</param>
            <returns>The privileges which the current user has for the current Realm.</returns>
        </member>
        <member name="M:Realms.Sync.PermissionExtensions.GetPrivileges``1(Realms.Realm)">
            <summary>
            Returns the computed privileges which the current user has for the given class.
            <para/>
            This combines all privileges granted on the class by all Roles which the
            current User is a member of into the final privileges which will be
            enforced by the server.
            <para/>
            The privilege calculation is done locally using cached data, and inherently
            may be stale. It is possible that this method may indicate that an
            operation is permitted but the server will still reject it if permission is
            revoked before the changes have been integrated on the server.
            <para/>
            Non-synchronized Realms always have permission to perform all operations.
            </summary>
            <typeparam name="T">The <see cref="T:Realms.RealmObject"/> inheritor to get the privileges for.</typeparam>
            <param name="realm">The Realm whose privileges are inspected.</param>
            <returns>The privileges which the current user has for the given class.</returns>
        </member>
        <member name="M:Realms.Sync.PermissionExtensions.GetPrivileges(Realms.Realm,System.String)">
            <summary>
            Returns the computed privileges which the current user has for the given class.
            <para/>
            This combines all privileges granted on the class by all Roles which the
            current User is a member of into the final privileges which will be
            enforced by the server.
            <para/>
            The privilege calculation is done locally using cached data, and inherently
            may be stale. It is possible that this method may indicate that an
            operation is permitted but the server will still reject it if permission is
            revoked before the changes have been integrated on the server.
            <para/>
            Non-synchronized Realms always have permission to perform all operations.
            </summary>
            <param name="realm">The Realm whose privileges are inspected.</param>
            <param name="className">The name of a <see cref="T:Realms.RealmObject"/> inheritor to get the privileges for.</param>
            <returns>The privileges which the current user has for the given class.</returns>
        </member>
        <member name="M:Realms.Sync.PermissionExtensions.GetPrivileges(Realms.Realm,Realms.RealmObject)">
            <summary>
            Returns the computed privileges which the current user has for the given object.
            </summary>
            <remarks>
            This combines all privileges granted on the object by all Roles which the
            current User is a member of into the final privileges which will be
            enforced by the server.
            <para/>
            The privilege calculation is done locally using cached data, and inherently
            may be stale. It is possible that this method may indicate that an
            operation is permitted but the server will still reject it if permission is
            revoked before the changes have been integrated on the server.
            <para/>
            Non-synchronized Realms always have permission to perform all operations.
            <para/>
            The object must be a valid object managed by this Realm. Passing in an
            invalidated object, an unmanaged object, or an object managed by a
            different Realm will throw an exception.
            </remarks>
            <param name="realm">The Realm whose privileges are inspected.</param>
            <param name="obj">A managed object to get the privileges for.</param>
            <returns>The privileges which the current user has for the given object.</returns>
        </member>
        <member name="M:Realms.Sync.PermissionExtensions.Add(System.Collections.Generic.IList{Realms.Sync.PermissionUser},Realms.Sync.User)">
            <summary>
            A convenience method that converts a <see cref="T:Realms.Sync.User"/> to
            <see cref="T:Realms.Sync.PermissionUser"/> and adds it to the list of users
            if necessary. If a <see cref="T:Realms.Sync.PermissionUser"/> with that identity
            already belongs to the collection, this method will be a no-op.
            </summary>
            <param name="users">
            The collection of users to which <c>user</c> will be added.
            </param>
            <param name="user">The user to add.</param>
        </member>
        <member name="T:Realms.Sync.PermissionRole">
            <summary>
            A Role within the permissions system.
            </summary>
            <remarks>
            A Role consists of a name for the role and a list of users which are members of the role.
            Roles are granted privileges on Realms, Classes and Objects, and in turn grant those
            privileges to all users which are members of the role.
            <para/>
            A role named "everyone" is automatically created in new Realms, and all new users which
            connect to the Realm are automatically added to it. Any other roles you wish to use are
            managed as normal Realm objects.
            </remarks>
        </member>
        <member name="P:Realms.Sync.PermissionRole.Name">
            <summary>
            Gets the name of the Role.
            </summary>
        </member>
        <member name="P:Realms.Sync.PermissionRole.Users">
            <summary>
            Gets the users which belong to the role.
            </summary>
        </member>
        <member name="M:Realms.Sync.PermissionRole.Get(Realms.Realm,System.String)">
            <summary>
            Gets or creates a <see cref="T:Realms.Sync.PermissionRole"/> in the provided Realm.
            </summary>
            <param name="realm">The Realm where the Role will be created.</param>
            <param name="roleName">The name of the Role.</param>
            <returns>
            A <see cref="T:Realms.Sync.PermissionRole"/> instance that can be inspected or manipulated.
            </returns>
        </member>
        <member name="T:Realms.Sync.PermissionUser">
            <summary>
            A representation of a sync user within the permissions system.
            </summary>
            <remarks>
            <see cref="T:Realms.Sync.PermissionUser"/> objects are created automatically for each sync user which connects
            to a Realm, and can also be created manually if you wish to grant permissions to a user
            which has not yet connected to this Realm.
            </remarks>
        </member>
        <member name="P:Realms.Sync.PermissionUser.Identity">
            <summary>
            Gets the unique Realm Object Server user ID string identifying this user. This will have
            the same value as <see cref="P:Realms.Sync.User.Identity"/>.
            </summary>
        </member>
        <member name="P:Realms.Sync.PermissionUser.Role">
            <summary>
            Gets the user's private role. This will be initialized to a role named for the user's
            identity that contains this user as its only member.
            </summary>
        </member>
        <member name="P:Realms.Sync.PermissionUser.Roles">
            <summary>
            Gets the Roles which this user belongs to.
            </summary>
        </member>
        <member name="M:Realms.Sync.PermissionUser.Get(Realms.Realm,System.String)">
            <summary>
            Gets or creates a <see cref="T:Realms.Sync.PermissionUser"/> with the specified identity.
            </summary>
            <param name="realm">The Realm instance.</param>
            <param name="identity">The Realm Object Server user ID.</param>
            <returns>
            A <see cref="T:Realms.Sync.PermissionUser"/> instance that can be added to one or more <see cref="T:Realms.Sync.PermissionRole"/>s.
            </returns>
        </member>
        <member name="T:Realms.Sync.RealmPermission">
            <summary>
            A singleton object which describes Realm-wide permissions.
            </summary>
            <remarks>
            An object of this type is automatically created in the Realm for you, and more objects
            cannot be created manually. Call <see cref="M:Realms.Sync.RealmPermission.Get(Realms.Realm)"/> to obtain the
            instance for a specific Realm.
            </remarks>
        </member>
        <member name="P:Realms.Sync.RealmPermission.Permissions">
            <summary>
            Gets the permissions for the Realm.
            </summary>
        </member>
        <member name="M:Realms.Sync.RealmPermission.Get(Realms.Realm)">
            <summary>
            Retrieve the singleton object for the given Realm. This will return
            <c>null</c> for Realms in full synchronization mode.
            </summary>
            <param name="realm">The Realm instance.</param>
            <returns>
            A <c>RealmPermission</c> instance that allows you to manipulate the permissions
            for this Realm.
            </returns>
        </member>
        <member name="T:Realms.Sync.RealmPrivileges">
            <summary>
            A description of the actual privileges which apply to a Realm.
            </summary>
            <remarks>
            This is a combination of all of the privileges granted to all of the Roles which the
            current User is a member of, obtained by calling <see cref="M:Realms.Sync.PermissionExtensions.GetPrivileges(Realms.Realm)"/> on
            the Realm.
            </remarks>
        </member>
        <member name="F:Realms.Sync.RealmPrivileges.Read">
            <summary>
            If this flag is not present, the current User is not permitted to see the Realm at all. This can
            happen only if the Realm was created locally and has not yet been synchronized.
            </summary>
        </member>
        <member name="F:Realms.Sync.RealmPrivileges.Update">
            <summary>
            If this flag is not present, no modifications to the Realm are permitted. Write transactions can
            be performed locally, but any changes made will be reverted by the server. <see cref="F:Realms.Sync.RealmPrivileges.SetPermissions"/>
            and <see cref="F:Realms.Sync.RealmPrivileges.ModifySchema"/> will always be denied when this is denied.
            </summary>
        </member>
        <member name="F:Realms.Sync.RealmPrivileges.SetPermissions">
            <summary>
            If this flag is not present, no modifications to the permissions property of the <see cref="T:Realms.Sync.RealmPermission"/>
            object for are permitted. Write transactions can be performed locally, but any
            changes made will be reverted by the server.
            </summary>
            <remarks>
            Note that if invalid privilege changes are made, <see cref="M:Realms.Sync.PermissionExtensions.GetPrivileges(Realms.Realm)"/>
            will return results reflecting those invalid changes until synchronization occurs.
            <para/>
            Even if this flag is present, note that the user will be unable to grant more
            privileges to a Role than what they have themselves, e.g. they won't be able to grant
            <see cref="F:Realms.Sync.RealmPrivileges.Update"/> if they haven't been granted <see cref="F:Realms.Sync.RealmPrivileges.Update"/> first.
            <para/>
            Adding or removing Users from a Role is controlled by <see cref="F:Realms.Sync.RealmPrivileges.Update"/> privileges on that
            Role, and not by this value.
            </remarks>
        </member>
        <member name="F:Realms.Sync.RealmPrivileges.ModifySchema">
            <summary>
            If this flag is not present, the user is not permitted to add new object types to the Realm or add
            new properties to existing object types.
            </summary>
            <remarks>
            Defining new <see cref="T:Realms.RealmObject"/> subclasses (and not
            excluding them from the schema with <see cref="P:Realms.RealmConfigurationBase.ObjectClasses"/> will result
            in the application crashing if the object types are not first added on the server by a more privileged
            user.
            </remarks>
        </member>
        <member name="T:Realms.Sync.AccessLevel">
            <summary>
            Access levels which can be granted to Realm Platform users for specific synchronized Realms, using the permissions APIs.
            <br/>
            Note that each access level guarantees all allowed actions provided by less permissive access levels.
            Specifically, users with write access to a Realm can always read from that Realm, and users with administrative
            access can always read or write from the Realm.
            </summary>
        </member>
        <member name="F:Realms.Sync.AccessLevel.None">
            <summary>
            No access whatsoever.
            </summary>
        </member>
        <member name="F:Realms.Sync.AccessLevel.Read">
            <summary>
            User can only read the contents of the Realm.
            </summary>
            <remarks>
            Users who have read-only access to a Realm should open the Realm using
            <see cref="!:Realm.GetInstanceAsync(RealmConfigurationBase)"/> Attempting to directly open the Realm is
            an error; in this case the Realm must be deleted and re-opened.
            </remarks>
        </member>
        <member name="F:Realms.Sync.AccessLevel.Write">
            <summary>
            User can read and write the contents of the Realm.
            </summary>
        </member>
        <member name="F:Realms.Sync.AccessLevel.Admin">
            <summary>
            User can read, write, and administer the Realm, including granting permissions to other users.
            </summary>
        </member>
        <member name="T:Realms.Sync.PathPermission">
            <summary>
            This model is used to reflect permissions granted to a user.
            It should be used in conjunction with a <see cref="T:Realms.Sync.User"/>'s Permission Realm.
            </summary>
        </member>
        <member name="P:Realms.Sync.PathPermission.UpdatedAt">
            <summary>
            Gets when the object was updated the last time.
            </summary>
            <value>A <see cref="T:System.DateTimeOffset"/> indicating the last time the object has been updated.</value>
        </member>
        <member name="P:Realms.Sync.PathPermission.UserId">
            <summary>
            Gets the identity of the user affected by this permission.
            </summary>
            <value>The user identity.</value>
        </member>
        <member name="P:Realms.Sync.PathPermission.Path">
            <summary>
            Gets the relative path to the Realm on the server.
            </summary>
            <value>A relative path component.</value>
        </member>
        <member name="P:Realms.Sync.PathPermission.AccessLevel">
            <summary>
            Gets a value indicating the access level of the user with the specified
            <see cref="P:Realms.Sync.PathPermission.UserId"/> for the Realm at the specified <see cref="P:Realms.Sync.PathPermission.Path"/>.
            </summary>
            <value>The <see cref="P:Realms.Sync.PathPermission.AccessLevel"/>.</value>
        </member>
        <member name="P:Realms.Sync.PathPermission.RealmOwnerId">
            <summary>
            Gets the Id of the user who owns the Realm at <see cref="P:Realms.Sync.PathPermission.Path"/>.
            </summary>
            <value>A User Id.</value>
        </member>
        <member name="P:Realms.Sync.PathPermission.MayRead">
            <summary>
            Gets a value indicating whether the user inspecting that permission is allowed to read the Realm at the
            specified <see cref="P:Realms.Sync.PathPermission.Path"/>.
            </summary>
            <value><c>true</c> if reading is allowed, <c>false</c> otherwise.</value>
        </member>
        <member name="P:Realms.Sync.PathPermission.MayWrite">
            <summary>
            Gets a value indicating whether the user inspecting that permission is allowed to write to the Realm at the
            specified <see cref="P:Realms.Sync.PathPermission.Path"/>.
            </summary>
            <value><c>true</c> if writing is allowed, <c>false</c> otherwise.</value>
        </member>
        <member name="P:Realms.Sync.PathPermission.MayManage">
            <summary>
            Gets a value indicating whether the user inspecting that permission is allowed to manage the permissions for
            the Realm at the specified <see cref="P:Realms.Sync.PathPermission.Path"/>.
            </summary>
            <value><c>true</c> if managing is allowed, <c>false</c> otherwise.</value>
        </member>
        <member name="T:Realms.Sync.PermissionCondition">
            <summary>
            A class describing the condition based on which permissions will be applied.
            </summary>
        </member>
        <member name="M:Realms.Sync.PermissionCondition.UserId(System.String)">
            <summary>
            Apply permissions based on the user's Id.
            </summary>
            <returns>A <see cref="T:Realms.Sync.PermissionCondition"/> containing information about the user's Id.</returns>
            <param name="userId">The Id of the user.</param>
        </member>
        <member name="P:Realms.Sync.PermissionCondition.Default">
            <summary>
            Gets a <see cref="T:Realms.Sync.PermissionCondition"/> that describes the default permissions for all users
            who don't have explicit permissions applied. The <see cref="T:Realms.Sync.AccessLevel"/> granted alongside
            this condition will also be used as default access level for future new users.
            </summary>
            <remarks>
            The default permissions are not additive with more specific permissions, even if the latter
            are more restrictive - for example, a user who has been granted <see cref="F:Realms.Sync.AccessLevel.Read"/>
            access will not be write to a Realm, even if the default permissions grant <see cref="F:Realms.Sync.AccessLevel.Write"/>
            access.
            </remarks>
            <value>A <see cref="T:Realms.Sync.PermissionCondition"/> describing the default permissions.</value>
        </member>
        <member name="M:Realms.Sync.PermissionCondition.Email(System.String)">
            <summary>
            Apply permissions based on the user's Email when using the username/password login provider.
            </summary>
            <returns>A <see cref="T:Realms.Sync.PermissionCondition"/> containing information about the user's email.</returns>
            <param name="email">The email (username) of the user that will be affected by this condition.</param>
        </member>
        <member name="M:Realms.Sync.PermissionCondition.KeyValue(System.String,System.String)">
            <summary>
            Apply permissions based on a key/value combination in the user's metadata.
            </summary>
            <returns>
            A <see cref="T:Realms.Sync.PermissionCondition"/> containing information about the key/value combination that will be used
            for matching against.
            </returns>
            <param name="key">The metadata key to look for.</param>
            <param name="value">The metadata value that must match the key.</param>
        </member>
        <member name="T:Realms.Sync.PermissionOffer">
            <summary>
            Objects of this class are used to offer permissions to owned Realms.
            </summary>
        </member>
        <member name="P:Realms.Sync.PermissionOffer.CreatedAt">
            <summary>
            Gets the creation time of this object.
            </summary>
            <value>A <see cref="T:System.DateTimeOffset"/> indicating the object's creation date and time.</value>
        </member>
        <member name="P:Realms.Sync.PermissionOffer.Token">
            <summary>
            Gets the token that can be used to offer the permissions defined in this object to another user.
            </summary>
            <value>A string, set by the server, that can be used in <see cref="M:Realms.Sync.User.InvalidateOfferAsync(System.String)"/> or
            <see cref="M:Realms.Sync.User.AcceptPermissionOfferAsync(System.String)"/>.</value>
        </member>
        <member name="P:Realms.Sync.PermissionOffer.RealmPath">
            <summary>
            Gets the path of the Realm to offer permissions to.
            </summary>
        </member>
        <member name="P:Realms.Sync.PermissionOffer.AccessLevel">
            <summary>
            Gets a value indicating whether the receiver of this offer will be able to read from the Realm.
            </summary>
            <value><c>true</c> to allow the receiver to read data from the <see cref="T:Realms.Realm"/>.</value>
        </member>
        <member name="P:Realms.Sync.PermissionOffer.ExpiresAt">
            <summary>
            Gets the expiration date and time of the offer.
            </summary>
            <value>If <c>null</c>, the offer will never expire. Otherwise, the offer may not be consumed past the expiration date.</value>
        </member>
        <member name="P:Realms.Sync.PermissionOffer.MayRead">
            <summary>
            Gets a value indicating whether the receiver of this offer will be able to read data from the Realm.
            </summary>
            <value><c>true</c> to allow the receiver to read date from the <see cref="T:Realms.Realm"/>.</value>
        </member>
        <member name="P:Realms.Sync.PermissionOffer.MayWrite">
            <summary>
            Gets a value indicating whether the receiver of this offer will be able to write to the Realm.
            </summary>
            <value><c>true</c> to allow the receiver to write data to the <see cref="T:Realms.Realm"/>.</value>
        </member>
        <member name="P:Realms.Sync.PermissionOffer.MayManage">
            <summary>
            Gets a value indicating whether the receiver of this offer will be able to manage access rights for others.
            </summary>
            <value><c>true</c> to allow the receiver to offer others access to the <see cref="T:Realms.Realm"/>.</value>
        </member>
        <member name="T:Realms.Sync.Recipient">
            <summary>
            The user affected by the permission change.
            </summary>
        </member>
        <member name="F:Realms.Sync.Recipient.Any">
            <summary>
            Any user - either current or someone else.
            </summary>
        </member>
        <member name="F:Realms.Sync.Recipient.CurrentUser">
            <summary>
            The current user.
            </summary>
        </member>
        <member name="F:Realms.Sync.Recipient.OtherUser">
            <summary>
            User other than the current one.
            </summary>
        </member>
        <member name="T:Realms.Sync.ProgressDirection">
            <summary>
            The transfer direction (upload or download) tracked by a given progress notification subscription.
            </summary>
        </member>
        <member name="F:Realms.Sync.ProgressDirection.Upload">
            <summary>
            Monitors upload progress.
            </summary>
        </member>
        <member name="F:Realms.Sync.ProgressDirection.Download">
            <summary>
            Monitors download progress.
            </summary>
        </member>
        <member name="T:Realms.Sync.ProgressMode">
            <summary>
            The desired behavior of a progress notification subscription.
            </summary>
        </member>
        <member name="F:Realms.Sync.ProgressMode.ReportIndefinitely">
            <summary>
            The callback will be called forever, or until it is unregistered by disposing the subscription token.
            Notifications will always report the latest number of transferred bytes, and the most up-to-date number of
            total transferable bytes.
            </summary>
        </member>
        <member name="F:Realms.Sync.ProgressMode.ForCurrentlyOutstandingWork">
            <summary>
            The callback will, upon registration, store the total number of bytes to be transferred. When invoked, it will
            always report the most up-to-date number of transferable bytes out of that original number of transferable bytes.
            When the number of transferred bytes reaches or exceeds the number of transferable bytes, the callback will
            be unregistered.
            </summary>
        </member>
        <member name="T:Realms.Sync.SyncProgress">
            <summary>
            A struct containing information about the progress state at a given instant.
            </summary>
        </member>
        <member name="P:Realms.Sync.SyncProgress.TransferredBytes">
            <summary>
            Gets the number of bytes that have been transferred since subscribing for progress notifications.
            </summary>
            <value>The number of transferred bytes.</value>
        </member>
        <member name="P:Realms.Sync.SyncProgress.TransferableBytes">
            <summary>
            Gets the total number of bytes that have to be transferred since subscribing for progress notifications.
            The difference between that number and <see cref="P:Realms.Sync.SyncProgress.TransferredBytes"/> gives you the number of bytes not yet
            transferred. If the difference is 0, then all changes at the instant the callback fires have been
            successfully transferred.
            </summary>
            <value>The number of transferable bytes.</value>
        </member>
        <member name="T:Realms.Sync.Session">
            <summary>
            An object encapsulating a Realm Object Server session. Sessions represent the communication between the client (and a local Realm file on disk), and the server (and a remote Realm at a given URL stored on a Realm Object Server).
            Sessions are always created by the SDK and vended out through various APIs. The lifespans of sessions associated with Realms are managed automatically.
            </summary>
        </member>
        <member name="E:Realms.Sync.Session.Error">
            <summary>
            Triggered when an error occurs on a session. The <c>sender</c> argument will be the session which has errored.
            </summary>
        </member>
        <member name="P:Realms.Sync.Session.ServerUri">
            <summary>
            Gets the <see cref="T:System.Uri"/> describing the remote Realm which this session connects to and synchronizes changes with.
            </summary>
            <value>The <see cref="T:System.Uri"/> where the Realm Object Server resides.</value>
        </member>
        <member name="P:Realms.Sync.Session.State">
            <summary>
            Gets the session’s current state.
            </summary>
            <value>An enum value indicating the state of the session.</value>
        </member>
        <member name="P:Realms.Sync.Session.User">
            <summary>
            Gets the <see cref="P:Realms.Sync.Session.User"/> defined by the <see cref="T:Realms.Sync.SyncConfigurationBase"/> that is used to connect to the Realm Object Server.
            </summary>
            <value>The <see cref="P:Realms.Sync.Session.User"/> that was used to create the <see cref="T:Realms.Realm"/>'s <see cref="T:Realms.Sync.SyncConfigurationBase"/>.</value>
        </member>
        <member name="P:Realms.Sync.Session.Path">
            <summary>
            Gets the on-disk path of the Realm file backing the <see cref="T:Realms.Realm"/> this Session represents.
            </summary>
            <value>The file path.</value>
        </member>
        <member name="M:Realms.Sync.Session.GetProgressObservable(Realms.Sync.ProgressDirection,Realms.Sync.ProgressMode)">
             <summary>
             Gets an <see cref="T:System.IObservable`1"/> that can be used to track upload or download progress.
             </summary>
             <remarks>
             To start receiving notifications, you should call <see cref="M:System.IObservable`1.Subscribe(System.IObserver{`0})"/> on the returned object.
             The token returned from <see cref="M:System.IObservable`1.Subscribe(System.IObserver{`0})"/> should be retained as long as progress
             notifications are desired. To stop receiving notifications, call <see cref="M:System.IDisposable.Dispose"/>
             on the token.
             You don't need to keep a reference to the observable itself.
             The progress callback will always be called once immediately upon subscribing in order to provide
             the latest available status information.
             </remarks>
             <returns>An observable that you can subscribe to and receive progress updates.</returns>
             <param name="direction">The transfer direction (upload or download) to track in the subscription callback.</param>
             <param name="mode">The desired behavior of this progress notification block.</param>
             <example>
             <code>
             class ProgressNotifyingViewModel
             {
                 private IDisposable notificationToken;
            
                 public void ShowProgress()
                 {
                     var observable = session.GetProgressObservable(ProgressDirection.Upload, ProgressMode.ReportIndefinitely);
                     notificationToken = observable.Subscribe(progress =>
                     {
                         // Update relevant properties by accessing
                         // progress.TransferredBytes and progress.TransferableBytes
                     });
                 }
            
                 public void HideProgress()
                 {
                     notificationToken?.Dispose();
                     notificationToken = null;
                 }
             }
             </code>
             In this example we're using <see href="https://msdn.microsoft.com/en-us/library/ff402849(v=vs.103).aspx">ObservableExtensions.Subscribe</see>
             found in the <see href="https://github.com/Reactive-Extensions/Rx.NET">Reactive Extensions</see> class library.
             If you prefer not to take a dependency on it, you can create a class that implements <see cref="T:System.IObserver`1"/>
             and use it to subscribe instead.
             </example>
        </member>
        <member name="M:Realms.Sync.Session.WaitForUploadAsync">
            <summary>
            Waits for the <see cref="T:Realms.Sync.Session"/> to finish all pending uploads.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that will be completed when all pending uploads for this <see cref="T:Realms.Sync.Session"/> are completed.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when a faulted session is waited on.</exception>
        </member>
        <member name="M:Realms.Sync.Session.WaitForDownloadAsync">
            <summary>
            Waits for the <see cref="T:Realms.Sync.Session"/> to finish all pending downloads.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that will be completed when all pending downloads for this <see cref="T:Realms.Sync.Session"/> are completed.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when a faulted session is waited on.</exception>
        </member>
        <member name="M:Realms.Sync.Session.Stop">
            <summary>
            Stops any synchronization with the Realm Object Server until the Realm is re-opened again
            after fully closing it.
            <br/>
            Synchronization can be re-enabled by calling <see cref="M:Realms.Sync.Session.Start"/> again.
            </summary>
            <remarks>
            If the session is already stopped, calling this method will do nothing.
            </remarks>
        </member>
        <member name="M:Realms.Sync.Session.Start">
            <summary>
            Attempts to resume the session and enable synchronization with the Realm Object Server.
            </summary>
            <remarks>
            All sessions will be active by default and calling this method only makes sense if
            <see cref="M:Realms.Sync.Session.Stop"/> was called before that.
            </remarks>
        </member>
        <member name="M:Realms.Sync.Session.Reconnect">
            <summary>
            Attempts to reconnect all sessions.
            </summary>
            <remarks>
            By default, the sync engine will attempt to reconnect sessions at incrementing intervals. This method is
            useful when you are monitoring connectivity yourself, using e.g.
            <see href="https://github.com/jamesmontemagno/ConnectivityPlugin">Connectivity Plugin</see> or through the
            native connectivity API and you wish to cancel that delay and try to reconnect immediately.
            </remarks>
        </member>
        <member name="M:Realms.Sync.Session.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Realms.Sync.Session.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Realms.Sync.SessionState">
            <summary>
            The current state of a sync session object.
            </summary>
        </member>
        <member name="F:Realms.Sync.SessionState.Active">
            <summary>
            The session is connected to the Realm Object Server and is actively transferring data.
            </summary>
        </member>
        <member name="F:Realms.Sync.SessionState.Inactive">
            <summary>
            The session is not currently communicating with the Realm Object Server.
            </summary>
        </member>
        <member name="T:Realms.Sync.Subscription">
            <summary>
            A set of extension methods exposing query-based sync related functionality over collections.
            </summary>
        </member>
        <member name="M:Realms.Sync.Subscription.Subscribe``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            For Realms using query-based synchronization, fetches and synchronizes the objects that match the query. 
            </summary>
            <typeparam name="T">The type of the objects making up the query.</typeparam>
            <param name="query">
            A query, obtained by calling <see cref="M:Realms.Realm.All``1"/> with or without additional filtering applied.
            </param>
            <param name="name">The name of this query that can be used to unsubscribe from.</param>
            <returns>
            A <see cref="T:Realms.Sync.Subscription`1"/> instance that contains information and methods for monitoring
            the state of the subscription.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <c>query</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the <c>query</c> was not obtained from a query-based synchronized Realm.
            </exception>
        </member>
        <member name="M:Realms.Sync.Subscription.Subscribe``1(System.Linq.IQueryable{``0},Realms.Sync.SubscriptionOptions,System.Linq.Expressions.Expression{System.Func{``0,System.Linq.IQueryable}}[])">
            <summary>
            For Realms using query-based synchronization, fetches and synchronizes the objects that match the query. 
            </summary>
            <typeparam name="T">The type of the objects making up the query.</typeparam>
            <param name="query">
            A query, obtained by calling <see cref="M:Realms.Realm.All``1"/> with or without additional filtering applied.
            </param>
            <param name="options">
            Options that configure some metadata of the subscription, such as its name or time to live.
            </param>
            <param name="includedBacklinks">
            An array of property expressions which specifies which linkingObjects relationships should be included in
            the subscription. Subscriptions already include link and list properties (in the forward direction)
            automatically by default.
            </param>
            <returns>
            A <see cref="T:Realms.Sync.Subscription`1"/> instance that contains information and methods for monitoring
            the state of the subscription.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <c>query</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the <c>query</c> was not obtained from a query-based synchronized Realm.
            </exception>
        </member>
        <member name="M:Realms.Sync.Subscription.GetAllSubscriptions(Realms.Realm)">
            <summary>
            Returns all subscriptions registered for that Realm.
            </summary>
            <returns>A queryable collection of all registered subscriptions.</returns>
            <param name="realm">A Realm opened with a <see cref="T:Realms.Sync.QueryBasedSyncConfiguration"/>.</param>
        </member>
        <member name="M:Realms.Sync.Subscription.UnsubscribeAsync(Realms.Realm,System.String)">
            <summary>
            Cancel a named subscription that was created by calling <see cref="M:Realms.Sync.Subscription.Subscribe``1(System.Linq.IQueryable{``0},Realms.Sync.SubscriptionOptions,System.Linq.Expressions.Expression{System.Func{``0,System.Linq.IQueryable}}[])"/>.
            <para />
            Removing a subscription will delete all objects from the local Realm that were matched
            only by that subscription and not any remaining subscriptions. The deletion is performed
            by the server, and so has no immediate impact on the contents of the local Realm. If the
            device is currently offline, the removal will not be processed until the device returns online.
            </summary>
            <param name="realm">The Realm where this subscription was added.</param>
            <param name="subscriptionName">The name of the subscription to remove.</param>
            <returns>An awaitable task, that indicates that the subscription has been removed locally.</returns>
        </member>
        <member name="M:Realms.Sync.Subscription.UnsubscribeAsync``1(Realms.Sync.Subscription{``0})">
            <summary>
            Cancel a subscription that was created by calling <see cref="M:Realms.Sync.Subscription.Subscribe``1(System.Linq.IQueryable{``0},Realms.Sync.SubscriptionOptions,System.Linq.Expressions.Expression{System.Func{``0,System.Linq.IQueryable}}[])"/>.
            <para />
            Removing a subscription will delete all objects from the local Realm that were matched
            only by that subscription and not any remaining subscriptions. The deletion is performed
            by the server, and so has no immediate impact on the contents of the local Realm. If the
            device is currently offline, the removal will not be processed until the device returns online.
            </summary>
            <typeparam name="T">The type of the objects that make up the subscription query.</typeparam>
            <param name="subscription">The subscription to cancel.</param>
            <returns>An awaitable task, that indicates that the subscription has been removed locally.</returns>
        </member>
        <member name="T:Realms.Sync.Subscription`1">
            <summary>
            A class that represents a subscription to a set of objects in a synced Realm.
            <para/>
            When query-based sync is enabled for a synced Realm, the only objects that the server synchronizes to the
            client are those that match a sync subscription registered by that client. A subscription consists of
            of a query (represented by an <c>IQueryable{T}</c>) and an optional name.
            <para/>
            The state of the subscription can be observed by subscribing to the <see cref="E:Realms.Sync.Subscription`1.PropertyChanged"/> event handler.
            <para/>
            Subscriptions are created by calling <see cref="M:Realms.Sync.Subscription.Subscribe``1(System.Linq.IQueryable{``0},Realms.Sync.SubscriptionOptions,System.Linq.Expressions.Expression{System.Func{``0,System.Linq.IQueryable}}[])"/>.
            </summary>
            <typeparam name="T">The type of the objects that make up the subscription query.</typeparam>
        </member>
        <member name="E:Realms.Sync.Subscription`1.PropertyChanged">
            <inheritdoc />
        </member>
        <member name="P:Realms.Sync.Subscription`1.State">
            <summary>
            Gets a value indicating the state of this subscription.
            </summary>
            <value>The state of the subscription.</value>
        </member>
        <member name="P:Realms.Sync.Subscription`1.Error">
            <summary>
            Gets a value indicating what error (if any) has occurred while processing the subscription.
            If the <see cref="P:Realms.Sync.Subscription`1.State"/> is not <see cref="F:Realms.Sync.SubscriptionState.Error"/>, this will be <c>null</c>.
            </summary>
            <value>An instance of <see cref="T:System.Exception"/> if an error has occurred; <c>null</c> otherwise.</value>
        </member>
        <member name="P:Realms.Sync.Subscription`1.Results">
            <summary>
            Gets the query that this subscription is associated with. Regardless of the state of the subscription,
            this value will reflect the results in the local Realm. This allows you to data-bind to this property
            immediately and show the last synchronized data. If the <see cref="P:Realms.Sync.Subscription`1.State"/> is <see cref="F:Realms.Sync.SubscriptionState.Invalidated"/>,
            the values returned will not be an adequate representation of the state of the remote Realm.
            </summary>
            <value>
            A queryable collection that can be further filtered, ordered, or observed for changes.
            </value>
        </member>
        <member name="M:Realms.Sync.Subscription`1.WaitForSynchronizationAsync">
            <summary>
            Waits for the subscription to complete synchronizing (equivalent to transitioning to the
            <see cref="F:Realms.Sync.SubscriptionState.Complete"/> state.
            </summary>
            <returns>
            An awaitable task, that, upon completion, indicates that the objects matching the specified query
            have been synchronized to the local Realm.
            </returns>
        </member>
        <member name="T:Realms.Sync.SubscriptionOptions">
            <summary>
            A set of options provided to <see cref="M:Realms.Sync.Subscription.Subscribe``1(System.Linq.IQueryable{``0},System.String)"/>
            to control the behavior of the subscription.
            </summary>
        </member>
        <member name="P:Realms.Sync.SubscriptionOptions.Name">
            <summary>
            Gets or sets the name of the subscription.
            </summary>
            <value>The subscription name.</value>
        </member>
        <member name="P:Realms.Sync.SubscriptionOptions.TimeToLive">
            <summary>
            Gets or sets the time to live of the subscription. If not set or set
            to <c>null</c>, the subscription is kept indefinitely. The subscription
            will be automatically removed after the time to live passes.
            </summary>
            <value>The time to live.</value>
        </member>
        <member name="P:Realms.Sync.SubscriptionOptions.ShouldUpdate">
            <summary>
            Gets or sets a value indicating whether the subscription should be updated
            if one with the same name already exists. If set to <c>false</c> and a subscription
            with the same name exists, an exception will be thrown.
            </summary>
            <value><c>true</c> if subscription should be updated; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Realms.Sync.SubscriptionState">
            <summary>
            An enumeration, representing the possible state of a sync subscription.
            </summary>
        </member>
        <member name="F:Realms.Sync.SubscriptionState.Error">
            <summary>
            An error occurred while creating the subscription or while the server was processing it.
            </summary>
        </member>
        <member name="F:Realms.Sync.SubscriptionState.Pending">
            <summary>
            The subscription has been created, and is waiting to be processed by the server.
            </summary>
        </member>
        <member name="F:Realms.Sync.SubscriptionState.Complete">
            <summary>
            The subscription has been processed by the server, and objects matching the subscription
            are now being synchronized to this client.
            </summary>
        </member>
        <member name="F:Realms.Sync.SubscriptionState.Creating">
            <summary>
            The subscription is being created, but has not yet been written to the synced Realm.
            </summary>
        </member>
        <member name="F:Realms.Sync.SubscriptionState.Invalidated">
            <summary>
            This subscription has been removed.
            </summary>
        </member>
        <member name="T:Realms.Sync.User">
            <summary>
            This class represents a user on the Realm Object Server. The credentials are provided by various 3rd party providers (Facebook, Google, etc.).
            A user can log in to the Realm Object Server, and if access is granted, it is possible to synchronize the local and the remote Realm. Moreover, synchronization is halted when the user is logged out.
            It is possible to persist a user. By retrieving a user, there is no need to log in to the 3rd party provider again. Persisting a user between sessions, the user's credentials are stored locally on the device, and should be treated as sensitive data.
            </summary>
        </member>
        <member name="P:Realms.Sync.User.Current">
            <summary>
            Gets the currently logged-in user. If none exists, null is returned.
            If more than one user is currently logged in, an exception is thrown.
            </summary>
            <value>Valid user or <c>null</c> to indicate nobody logged in.</value>
            <exception cref="T:Realms.Exceptions.RealmException">Thrown if there are more than one users logged in.</exception>
        </member>
        <member name="P:Realms.Sync.User.AllLoggedIn">
            <summary>
            Gets all currently logged in users.
            </summary>
            <value>An array of valid logged in users.</value>
        </member>
        <member name="M:Realms.Sync.User.LoginAsync(Realms.Sync.Credentials,System.Uri)">
            <summary>
            Logs the user in to the Realm Object Server.
            </summary>
            <param name="credentials">The credentials to use for authentication.</param>
            <param name="serverUri">The URI of the server that the user is authenticated against.</param>
            <returns>An awaitable Task, that, upon completion, contains the logged in user.</returns>
        </member>
        <member name="M:Realms.Sync.User.GetLoggedInUser(System.String,System.Uri)">
            <summary>
            Gets a logged in user with a specified identity.
            </summary>
            <returns>A user instance if a logged in user with that id exists, <c>null</c> otherwise.</returns>
            <param name="identity">The identity of the user.</param>
            <param name="serverUri">The URI of the server that the user is authenticated against.</param>
        </member>
        <member name="P:Realms.Sync.User.RefreshToken">
            <summary>
            Gets or sets this user's refresh token. This is the user's credential for accessing the Realm Object Server and should be treated as sensitive data.
            Setting the refresh token is only supported for users authenticated with <see cref="M:Realms.Sync.Credentials.CustomRefreshToken(System.String,System.String,System.Boolean)"/>.
            </summary>
            <value>A unique string that can be used for refreshing the user's credentials.</value>
        </member>
        <member name="P:Realms.Sync.User.Identity">
            <summary>
            Gets the identity of this user on the Realm Object Server. The identity is a guaranteed to be unique among all users on the Realm Object Server.
            </summary>
            <value>A string that uniquely identifies that user in Realm Object Server.</value>
        </member>
        <member name="P:Realms.Sync.User.ServerUri">
            <summary>
            Gets the server URI that was used for authentication.
            </summary>
            <value>The <see cref="T:System.Uri"/> used to connect to the authentication service.</value>
        </member>
        <member name="P:Realms.Sync.User.IsAdmin">
            <summary>
            Gets a value indicating whether this <see cref="T:Realms.Sync.User"/> is a Realm Object Server administrator user.
            </summary>
            <value><c>true</c> if the user is admin; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Realms.Sync.User.State">
            <summary>
            Gets the current state of the user.
            </summary>
            <value>A value indicating whether the user is active, logged out, or an error has occurred.</value>
        </member>
        <member name="M:Realms.Sync.User.LogOutAsync">
            <summary>
            Logs out the user from the Realm Object Server. Once the Object Server has confirmed the logout the user credentials will be deleted from this device.
            </summary>
            <returns>An awaitable Task, that, upon completion indicates that the user has been logged out both locally and on the server.</returns>
        </member>
        <member name="M:Realms.Sync.User.ChangePasswordAsync(System.String)">
            <summary>
            Changes the user's password.
            </summary>
            <param name="newPassword">The user's new password.</param>
            <remarks>
            Changing a user's password using an authentication server that doesn't
            use HTTPS is a major security flaw, and should only be done while testing.
            </remarks>
            <returns>An awaitable task that, when successful, indicates that the password has changed.</returns>
        </member>
        <member name="M:Realms.Sync.User.ChangePasswordAsync(System.String,System.String)">
            <summary>
            Changes another user's password.
            </summary>
            <param name="userId">The <see cref="P:Realms.Sync.User.Identity"/> of the user we want to change the password for.</param>
            <param name="newPassword">The user's new password.</param>
            <remarks>
            This user needs admin privilege in order to change someone else's password.
            <br/>
            Changing a user's password using an authentication server that doesn't
            use HTTPS is a major security flaw, and should only be done while testing.
            </remarks>
            <returns>An awaitable task that, when successful, indicates that the password has changed.</returns>
        </member>
        <member name="M:Realms.Sync.User.RetrieveInfoForUserAsync(System.String,System.String)">
            <summary>
            Looks up user's information by provider id. This is useful when you know the id of a user in a provider's system,
            e.g. on Facebook and want to find the associated Realm user's Id.
            </summary>
            <param name="provider">The provider that the user has signed up with.</param>
            <param name="providerUserIdentity">The id of the user in the provider's system.</param>
            <remarks>
            This user needs admin privilege in order to look up other users by provider id.
            <br/>
            The exact names of built-in providers can be found in <see cref="T:Realms.Sync.Credentials.Provider"/>.
            </remarks>
            <returns>
            A <see cref="T:Realms.Sync.UserInfo"/>, containing information about the User's Identity in Realm's authentication system,
            or <c>null</c> if a user has not been found.
            </returns>
        </member>
        <member name="M:Realms.Sync.User.RequestPasswordResetAsync(System.Uri,System.String)">
            <summary>
            Request a password reset email to be sent to a user's email. This method requires internet connection
            and will not throw an exception, even if the email doesn't belong to a Realm Object Server user.
            </summary>
            <remarks>
            This can only be used for users who authenticated with <see cref="M:Realms.Sync.Credentials.UsernamePassword(System.String,System.String,System.Nullable{System.Boolean})"/>
            and passed a valid email address as a username.
            </remarks>
            <param name="serverUri">The URI of the server that the user is authenticated against.</param>
            <param name="email">The email that corresponds to the user's username.</param>
            <returns>An awaitable task that, upon completion, indicates that the request has been sent.</returns>
        </member>
        <member name="M:Realms.Sync.User.CompletePasswordResetAsync(System.Uri,System.String,System.String)">
            <summary>
            Complete the password reset flow by using the reset token sent to the user's email as a one-time
            authorization token to change the password.
            </summary>
            <remarks>
            By default, the link that will be sent to the user's email will redirect to a webpage where
            they can enter their new password. If you wish to provide a native UX, you may wish to modify
            the url to use deep linking to open the app, extract the token, and navigate to a view that
            allows them to change their password within the app.
            </remarks>
            <param name="serverUri">The URI of the server that the user is authenticated against.</param>
            <param name="token">The token that was sent to the user's email address.</param>
            <param name="newPassword">The user's new password.</param>
            <returns>An awaitable task that, when successful, indicates that the password has changed.</returns>
        </member>
        <member name="M:Realms.Sync.User.RequestEmailConfirmationAsync(System.Uri,System.String)">
            <summary>
            Request an email confirmation email to be sent to a user's email. This method requires internet connection
            and will not throw an exception, even if the email doesn't belong to a Realm Object Server user.
            </summary>
            <param name="serverUri">The URI of the server that the user is authenticated against.</param>
            <param name="email">The email that corresponds to the user's username.</param>
            <returns>An awaitable task that, upon completion, indicates that the request has been sent.</returns>
        </member>
        <member name="M:Realms.Sync.User.ConfirmEmailAsync(System.Uri,System.String)">
            <summary>
            Complete the password reset flow by using the confirmation token sent to the user's email as a one-time
            authorization token to confirm their email.
            </summary>
            <remarks>
            By default, the link that will be sent to the user's email will redirect to a webpage where
            they'll see a generic "Thank you for confirming" text. If you wish to provide a native UX, you
            may wish to modify the url to use deep linking to open the app, extract the token, and inform them
            that their email has been confirmed.
            </remarks>
            <param name="serverUri">The URI of the server that the user is authenticated against.</param>
            <param name="token">The token that was sent to the user's email address.</param>
            <returns>An awaitable task that, when successful, indicates that the email has been confirmed.</returns>
        </member>
        <member name="M:Realms.Sync.User.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Realms.Sync.User.Equals(Realms.Sync.User)">
            <inheritdoc />
        </member>
        <member name="M:Realms.Sync.User.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Realms.Sync.User.GetGrantedPermissionsAsync(Realms.Sync.Recipient)">
            <summary>
            Asynchronously retrieve all permissions associated with the user calling this method.
            </summary>
            <returns>
            A collection of <see cref="T:Realms.Sync.PathPermission"/> objects that provide detailed information
            regarding the granted access.
            </returns>
            <param name="recipient">The optional recipient of the permission.</param>
        </member>
        <member name="M:Realms.Sync.User.ApplyPermissionsAsync(Realms.Sync.PermissionCondition,System.String,Realms.Sync.AccessLevel)">
            <summary>
            Changes the permissions of a Realm.
            </summary>
            <returns>
            An awaitable task, that, upon completion, indicates that the permissions have been successfully applied by the server.
            </returns>
            <param name="condition">A <see cref="T:Realms.Sync.PermissionCondition"/> that will be used to match existing users against.</param>
            <param name="realmPath">The Realm path whose permissions settings should be changed. Use <c>*</c> to change the permissions of all Realms managed by this <see cref="T:Realms.Sync.User"/>.</param>
            <param name="accessLevel">
            The access level to grant matching users. Note that the access level setting is absolute, i.e. it may revoke permissions for users that
            previously had a higher access level. To revoke all permissions, use <see cref="F:Realms.Sync.AccessLevel.None" />
            </param>
        </member>
        <member name="M:Realms.Sync.User.OfferPermissionsAsync(System.String,Realms.Sync.AccessLevel,System.Nullable{System.DateTimeOffset})">
            <summary>
            Generates a token that can be used for sharing a Realm.
            </summary>
            <returns>
            A token that can be shared with another user, e.g. via email or message and then consumed by
            <see cref="M:Realms.Sync.User.AcceptPermissionOfferAsync(System.String)"/> to obtain permissions to a Realm.</returns>
            <param name="realmPath">The Realm URL whose permissions settings should be changed. Use <c>*</c> to change the permissions of all Realms managed by this <see cref="T:Realms.Sync.User"/>.</param>
            <param name="accessLevel">
            The access level to grant matching users. Note that the access level setting is absolute, i.e. it may revoke permissions for users that
            previously had a higher access level. To revoke all permissions, use <see cref="F:Realms.Sync.AccessLevel.None" />
            </param>
            <param name="expiresAt">Optional expiration date of the offer. If set to <c>null</c>, the offer doesn't expire.</param>
        </member>
        <member name="M:Realms.Sync.User.AcceptPermissionOfferAsync(System.String)">
            <summary>
            Consumes a token generated by <see cref="M:Realms.Sync.User.OfferPermissionsAsync(System.String,Realms.Sync.AccessLevel,System.Nullable{System.DateTimeOffset})"/> to obtain permissions to a shared Realm.
            </summary>
            <returns>The relative url of the Realm that the token has granted permissions to.</returns>
            <param name="offerToken">The token, generated by <see cref="M:Realms.Sync.User.OfferPermissionsAsync(System.String,Realms.Sync.AccessLevel,System.Nullable{System.DateTimeOffset})"/>.</param>
        </member>
        <member name="M:Realms.Sync.User.InvalidateOfferAsync(Realms.Sync.PermissionOffer)">
            <summary>
            Invalidates a permission offer.
            </summary>
            <remarks>
            Invalidating an offer prevents new users from consuming its token. It doesn't revoke any permissions that have
            already been granted.
            </remarks>
            <returns>
            An awaitable task, that, upon completion, indicates that the offer has been successfully invalidated by the server.
            </returns>
            <param name="offer">The offer that should be invalidated.</param>
        </member>
        <member name="M:Realms.Sync.User.InvalidateOfferAsync(System.String)">
            <summary>
            Invalidates a permission offer by its token.
            </summary>
            <remarks>
            Invalidating an offer prevents new users from consuming its token. It doesn't revoke any permissions that have
            already been granted.
            </remarks>
            <returns>
            An awaitable task, that, upon completion, indicates that the offer has been successfully invalidated by the server.
            </returns>
            <param name="offerToken">The token of the offer that should be invalidated.</param>
        </member>
        <member name="M:Realms.Sync.User.GetPermissionOffersAsync">
            <summary>
            Asynchronously retrieve the permission offers that this user has created by invoking <see cref="M:Realms.Sync.User.OfferPermissionsAsync(System.String,Realms.Sync.AccessLevel,System.Nullable{System.DateTimeOffset})"/>.
            </summary>
            <returns>A collection of <see cref="T:Realms.Sync.PermissionOffer"/> objects.</returns>
        </member>
        <member name="T:Realms.Sync.UserPersistenceMode">
            <summary>
            Enumeration that specifies how and if logged-in <see cref="T:Realms.Sync.User"/> objects are persisted
            across application launches.
            </summary>
        </member>
        <member name="F:Realms.Sync.UserPersistenceMode.NotEncrypted">
            <summary>
            Persist <see cref="T:Realms.Sync.User"/> objects, but do not encrypt them.
            </summary>
        </member>
        <member name="F:Realms.Sync.UserPersistenceMode.Encrypted">
            <summary>
            Persist <see cref="T:Realms.Sync.User"/> objects in an encrypted store.
            </summary>
        </member>
        <member name="F:Realms.Sync.UserPersistenceMode.Disabled">
            <summary>
            Do not persist <see cref="T:Realms.Sync.User"/> objects.
            </summary>
        </member>
        <member name="T:Realms.Sync.UserState">
            <summary>
            The state of the user object.
            </summary>
        </member>
        <member name="F:Realms.Sync.UserState.LoggedOut">
            <summary>
            The user is logged out. Call <see cref="M:Realms.Sync.User.LoginAsync(Realms.Sync.Credentials,System.Uri)"/> with valid credentials to log the user back in.
            </summary>
        </member>
        <member name="F:Realms.Sync.UserState.Active">
            <summary>
            The user is logged in, and any Realms associated with it are synchronizing with the Realm Object Server.
            </summary>
        </member>
        <member name="F:Realms.Sync.UserState.Error">
            <summary>
            The user has encountered a fatal error state, and cannot be used.
            </summary>
        </member>
        <member name="T:Realms.InMemoryConfiguration">
            <summary>
            A Realm configuration specifying settings for an in-memory Realm. When all in-memory instances with the
            same identifier are disposed or go out of scope, all data in that Realm is deleted.
            </summary>
        </member>
        <member name="P:Realms.InMemoryConfiguration.Identifier">
            <summary>
            Gets a value indicating the identifier of the Realm that will be opened with this <see cref="T:Realms.InMemoryConfiguration"/>.
            </summary>
        </member>
        <member name="M:Realms.InMemoryConfiguration.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Realms.InMemoryConfiguration"/> class with a specified identifier.
            </summary>
            <param name="identifier">A string that will uniquely identify this in-memory Realm.</param>
            <remarks>
            Different instances with the same identifier will see the same data.
            When all instances with a particular identifier have been removed, the data will be deleted and no longer accessible.
            The identifier must not be the same as the file name of a persisted Realm.
            </remarks>
        </member>
        <member name="T:Realms.RealmConfiguration">
            <summary>
            Realm configuration specifying settings that affect the Realm's behavior.
            </summary>
            <remarks>
            Its main role is generating a canonical path from whatever absolute, relative subdirectory, or just filename the user supplies.
            </remarks>
        </member>
        <member name="T:Realms.RealmConfiguration.MigrationCallbackDelegate">
            <summary>
            In order to handle manual migrations, you need to supply a migration callback to your
            <see cref="T:Realms.RealmConfiguration"/>. It will be called with a <see cref="T:Realms.Migration"/> instance containing
            the pre- and the post-migration <see cref="T:Realms.Realm"/>. You should make sure that the <see cref="P:Realms.Migration.NewRealm"/>
            property on it contains a database that is up to date when returning. The <c>oldSchemaVersion</c>
            parameter will tell you which <see cref="P:Realms.RealmConfigurationBase.SchemaVersion"/> the user is migrating
            <b>from</b>. They should always be migrating to the current <see cref="P:Realms.RealmConfigurationBase.SchemaVersion"/>.
            </summary>
            <param name="migration">
            The <see cref="T:Realms.Migration"/> instance, containing information about the old and the new <see cref="T:Realms.Realm"/>.
            </param>
            <param name="oldSchemaVersion">
            An unsigned long value indicating the <see cref="P:Realms.RealmConfigurationBase.SchemaVersion"/> of the old
            <see cref="T:Realms.Realm"/>.
            </param>
        </member>
        <member name="T:Realms.RealmConfiguration.ShouldCompactDelegate">
            <summary>
            A callback, invoked when opening a Realm for the first time during the life
            of a process to determine if it should be compacted before being returned
            to the user.
            </summary>
            <param name="totalBytes">Total file size (data + free space).</param>
            <param name="bytesUsed">Total data size.</param>
            <returns><c>true</c> to indicate that an attempt to compact the file should be made.</returns>
            <remarks>The compaction will be skipped if another process is accessing it.</remarks>
        </member>
        <member name="P:Realms.RealmConfiguration.ShouldDeleteIfMigrationNeeded">
            <summary>
            Gets or sets a value indicating whether the database will be deleted if the <see cref="T:Realms.Schema.RealmSchema"/>
            mismatches the one in the code. Use this when debugging and developing your app but never release it with
            this flag set to <c>true</c>.
            </summary>
            <value><c>true</c> to delete the database on schema mismatch; <c>false</c> otherwise.</value>
        </member>
        <member name="P:Realms.RealmConfiguration.IsReadOnly">
            <summary>
            Gets or sets a value indicating whether a <see cref="T:Realms.Realm"/> is opened as readonly. This allows opening it
            from locked locations such as resources, bundled with an application.
            </summary>
            <value><c>true</c> if the <see cref="T:Realms.Realm"/> will be opened as readonly; <c>false</c> otherwise.</value>
        </member>
        <member name="P:Realms.RealmConfiguration.MigrationCallback">
            <summary>
            Gets or sets the migration callback.
            </summary>
            <value>
            The <see cref="T:Realms.RealmConfiguration.MigrationCallbackDelegate"/> that will be invoked if the <see cref="T:Realms.Realm"/> needs
            to be migrated.
            </value>
        </member>
        <member name="P:Realms.RealmConfiguration.ShouldCompactOnLaunch">
            <summary>
            Gets or sets the compact on launch callback.
            </summary>
            <value>
            The <see cref="T:Realms.RealmConfiguration.ShouldCompactDelegate"/> that will be invoked when opening a Realm for the first time
            to determine if it should be compacted before being returned to the user.
            </value>
        </member>
        <member name="P:Realms.RealmConfiguration.DefaultConfiguration">
            <summary>
            Gets or sets the <see cref="T:Realms.RealmConfigurationBase"/> that is used when creating a new <see cref="T:Realms.Realm"/> without specifying a configuration.
            </summary>
            <value>The default configuration.</value>
        </member>
        <member name="M:Realms.RealmConfiguration.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Realms.RealmConfiguration"/> class.
            </summary>
            <param name="optionalPath">Path to the realm, must be a valid full path for the current platform, relative subdirectory, or just filename.</param>
        </member>
        <member name="M:Realms.RealmConfiguration.ConfigWithPath(System.String)">
            <summary>
            Clone method allowing you to override or customize the current path.
            </summary>
            <returns>An object with a fully-specified, canonical path.</returns>
            <param name="newConfigPath">Path to the realm, must be a valid full path for the current platform, relative subdirectory, or just filename.</param>
        </member>
        <member name="T:Realms.RealmConfigurationBase">
            <summary>
            Base class for specifying configuration settings that affect the Realm's behavior.
            </summary>
            <remarks>
            Its main role is generating a canonical path from whatever absolute, relative subdirectory, or just filename the user supplies.
            </remarks>
        </member>
        <member name="P:Realms.RealmConfigurationBase.DefaultRealmName">
            <summary>
            Gets the filename to be combined with the platform-specific document directory.
            </summary>
            <value>A string representing a filename only, no path.</value>
        </member>
        <member name="P:Realms.RealmConfigurationBase.DatabasePath">
            <summary>
            Gets or sets the full path of the Realms opened with this Configuration. May be overridden by passing in a separate name.
            </summary>
            <value>The absolute path to the Realm.</value>
        </member>
        <member name="P:Realms.RealmConfigurationBase.IsDynamic">
            <summary>
            Gets or sets a value indicating whether the Realm will be open in dynamic mode. If opened in dynamic mode,
            the schema will be read from the file on disk.
            </summary>
            <value><c>true</c> if the Realm will be opened in dynamic mode; <c>false</c> otherwise.</value>
        </member>
        <member name="P:Realms.RealmConfigurationBase.ObjectClasses">
            <summary>
            Gets or sets the list of classes persisted in a Realm opened with this configuration.
            </summary>
            <remarks>
            Typically left null so by default all <see cref="T:Realms.RealmObject"/>s will be able to be stored in all Realms.
            </remarks>
            <example>
            <code>
            config.ObjectClasses = new Type[]
            {
                typeof(CommonClass),
                typeof(RareClass)
            };
            </code>
            </example>
            <value>The classes that can be persisted in the Realm.</value>
        </member>
        <member name="M:Realms.RealmConfigurationBase.GetPathToRealm(System.String)">
            <summary>
            Utility to build a path in which a Realm will be created so can consistently use filenames and relative paths.
            </summary>
            <param name="optionalPath">Path to the Realm, must be a valid full path for the current platform, relative subdirectory, or just filename.</param>
            <returns>A full path including name of Realm file.</returns>
        </member>
        <member name="P:Realms.RealmConfigurationBase.SchemaVersion">
            <summary>
            Gets or sets a number, indicating the version of the schema. Can be used to arbitrarily distinguish between schemas even if they have the same objects and properties.
            </summary>
            <value>0-based value initially set to zero so all user-set values will be greater.</value>
        </member>
        <member name="P:Realms.RealmConfigurationBase.EncryptionKey">
            <summary>
            Gets or sets the key, used to encrypt the entire Realm. Once set, must be specified each time the file is used.
            </summary>
            <value>Full 64byte (512bit) key for AES-256 encryption.</value>
        </member>
        <member name="T:Realms.ErrorEventArgs">
            <summary>
            Provides error information for the <see cref="E:Realms.Realm.Error"/> event.
            </summary>
        </member>
        <member name="P:Realms.ErrorEventArgs.Exception">
            <summary>
            Gets the <see cref="P:Realms.ErrorEventArgs.Exception"/> that represents the error that occurred.
            </summary>
            <value>The exception that has occurred.</value>
        </member>
        <member name="T:Realms.Exceptions.RealmClassLacksPrimaryKeyException">
            <summary>
            An exception thrown when trying to lookup an object by primary key, when the object doesn't have <see cref="T:Realms.PrimaryKeyAttribute"/> specified.
            </summary>
        </member>
        <member name="T:Realms.Exceptions.RealmClosedException">
            <summary>
            An exception thrown when trying to invoke members of a closed <see cref="T:Realms.Realm"/>.
            </summary>
        </member>
        <member name="T:Realms.Exceptions.RealmDecryptionFailedException">
            <summary>
            An exception, raised when file decryption is unsuccessful, most likely due to invalid
            <see cref="P:Realms.RealmConfigurationBase.EncryptionKey"/>.
            </summary>
        </member>
        <member name="T:Realms.Exceptions.RealmDuplicatePrimaryKeyValueException">
            <summary>
            An exception thrown when an object with the same primary key has already been added.
            </summary>
        </member>
        <member name="T:Realms.Exceptions.RealmException">
            <summary>
            Base for Realm specific exceptions.
            </summary>
        </member>
        <member name="T:Realms.Exceptions.RealmExceptionCodes">
            <summary>Codes used in forwarding exceptions from the native C++ core, to be regenerated in C#.</summary>
            <remarks> <b>Warning:</b> Keep these codes aligned with realm_error_type.hpp in wrappers.</remarks>
        </member>
        <member name="T:Realms.Exceptions.RealmFeatureUnavailableException">
            <summary>
            An exception thrown when attempting to use a feature that is not available at your edition level.
            If you're using a paid edition of the Realm Platform, make sure you call
            <c>SyncConfiguration.SetFeatureToken</c> before any calls to <see cref="M:Realms.Realm.GetInstance(Realms.RealmConfigurationBase)"/>.
            </summary>
            <seealso href="https://realm.io/docs/realm-object-server/pe-ee/#enabling-professional-and-enterprise-apis">
            See more details on Enabling Professional and Enterprise APIs in the documentation.
            </seealso>
        </member>
        <member name="T:Realms.Exceptions.RealmFileAccessErrorException">
            <summary>
            Base for catching exceptions with Realm files, typically problems from which an app would recover.
            </summary>
            <remarks>
            You can catch any of the subclasses independently but any File-level error which could be handled by an application descends from this type.
            </remarks>
        </member>
        <member name="T:Realms.Exceptions.RealmFileExistsException">
            <summary>
            Exception thrown when a file with the same name already exists.
            </summary>
        </member>
        <member name="T:Realms.Exceptions.RealmFileNotFoundException">
            <summary>
            Exception thrown when trying to open a file that does not exist.
            </summary>
        </member>
        <member name="T:Realms.Exceptions.RealmInvalidDatabaseException">
            <summary>
            Exception thrown when a file exists but doesn't appear to be a Realm database, may indicate corruption.
            </summary>
        </member>
        <member name="T:Realms.Exceptions.RealmInvalidObjectException">
            <summary>
            An exception, thrown when the object is no longer managed by the <see cref="T:Realms.Realm"/>.
            </summary>
        </member>
        <member name="T:Realms.Exceptions.RealmInvalidTransactionException">
            <summary>
            An exception, thrown when trying to write data to the <see cref="T:Realms.Realm"/> outside a <see cref="T:Realms.Transaction"/> 
            or when trying to create a transaction on a <see cref="T:Realms.Realm"/> that is opened as read-only.
            </summary>
        </member>
        <member name="T:Realms.Exceptions.RealmMigrationNeededException">
            <summary>
            Exception thrown when attempting to open a file whose <see cref="T:Realms.Schema.RealmSchema"/> differs from your current class declarations.
            </summary>
            <seealso href="https://realm.io/docs/xamarin/latest/#migrations">Read more about Migrations.</seealso>
        </member>
        <member name="T:Realms.Exceptions.RealmMismatchedConfigException">
            <summary>
            An exception thrown when you try to open a Realm file with a different <see cref="T:Realms.RealmConfigurationBase"/>.
            </summary>
        </member>
        <member name="T:Realms.Exceptions.RealmObjectManagedByAnotherRealmException">
            <summary>
            Exception thrown when you're trying to use <see cref="M:Realms.Realm.Add(Realms.RealmObject,System.Boolean)"/> but the object is already managed by a
            different <see cref="T:Realms.Realm"/>.
            </summary>
        </member>
        <member name="T:Realms.Exceptions.RealmOutOfMemoryException">
            <summary>
            Exception when Realm's run out of memory, shut down your application rather than trying to continue.
            </summary>
        </member>
        <member name="T:Realms.Exceptions.RealmPermissionDeniedException">
            <summary>
            Exception when you can't open an existing realm file, or create a new one.
            </summary>
            <remarks>
            May be seen in testing if you have crashed a unit test but an external test runner is still going.
            </remarks>
        </member>
        <member name="T:Realms.Server.Exceptions.NotifierStartException">
            <summary>
            An exception thrown while attempting to start the Notifier.
            </summary>
        </member>
        <member name="P:Realms.Server.Exceptions.NotifierStartException.ErrorCode">
            <summary>
            Gets an integer value representing the code of the error.
            </summary>
            <value>An integer error code.</value>
        </member>
        <member name="T:Realms.Server.IChangeDetails">
            <summary>
            An object containing information about the change that occurred to a Realm.
            </summary>
        </member>
        <member name="P:Realms.Server.IChangeDetails.RealmPath">
            <summary>
            Gets a value representing the relative path of the Realm.
            </summary>
            <value>A relative path in the form of <c>/some-user-id/myrealm</c>.</value>
        </member>
        <member name="P:Realms.Server.IChangeDetails.PreviousRealm">
            <summary>
            Gets an instance of the Realm just before the change occurred. It can be used to obtain the deleted
            items or to compare the properties of the changed items. This instance is readonly and may be null if
            the Realm was just created.
            </summary>
            <value>A <see cref="T:Realms.Realm"/> instance.</value>
        </member>
        <member name="P:Realms.Server.IChangeDetails.CurrentRealm">
            <summary>
            Gets an instance of the Realm just after the change has occurred. This instance is readonly. If you wish
            to write some data in response to the change, you use <see cref="M:Realms.Server.IChangeDetails.GetRealmForWriting"/>.
            </summary>
            <value>A <see cref="T:Realms.Realm"/> instance.</value>
        </member>
        <member name="P:Realms.Server.IChangeDetails.Changes">
            <summary>
            Gets a collection of detailed change information. The keys of the dictionary contain the names of the objects
            that have been modified, while the values contain <see cref="T:Realms.Server.IChangeSetDetails"/> instances describing the
            indexes of the changed objects.
            </summary>
            <value>A <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/> of object name-change details pair.</value>
        </member>
        <member name="M:Realms.Server.IChangeDetails.GetRealmForWriting">
            <summary>
            Gets an instance of the Realm that can be used for writing new information or updating existing
            objects. Because changes may have occurred in the background, this Realm may contain slightly newer
            data than <see cref="P:Realms.Server.IChangeDetails.CurrentRealm"/>.
            </summary>
            <remarks>
            Writing to this Realm will cause changes to be propagated to all synchronized clients, including the
            <see cref="T:Realms.Server.INotifier"/>. A change notification will then be sent to handlers so care must be taken to
            avoid creating an endless loop.
            </remarks>
            <returns>A writeable <see cref="T:Realms.Realm"/> instance.</returns>
        </member>
        <member name="T:Realms.Server.IChangeSetDetails">
            <summary>
            An object containing information about the insertions, deletions, and modifications
            performed on a single collection of a certain object type.
            </summary>
        </member>
        <member name="P:Realms.Server.IChangeSetDetails.Insertions">
            <summary>
            Gets a collection of <see cref="T:Realms.Server.IModificationDetails"/> instances, describing
            the objects that have been inserted to the collection.
            </summary>
            <value>An array of insertions.</value>
        </member>
        <member name="P:Realms.Server.IChangeSetDetails.Modifications">
            <summary>
            Gets a collection of <see cref="T:Realms.Server.IModificationDetails"/> instances, describing
            the objects that have been modified in the collection.
            </summary>
            <value>An array of modifications.</value>
        </member>
        <member name="P:Realms.Server.IChangeSetDetails.Deletions">
            <summary>
            Gets a collection of <see cref="T:Realms.Server.IModificationDetails"/> instances, describing
            the objects that have been deleted from the collection.
            </summary>
            <value>An array of deletions.</value>
        </member>
        <member name="T:Realms.Server.IModificationDetails">
            <summary>
            An object that contains information about the change that occurred on a single
            object.
            </summary>
        </member>
        <member name="P:Realms.Server.IModificationDetails.PreviousIndex">
            <summary>
            Gets the index of the modified object in the collection before the change. If the
            object has been inserted, it will return -1.
            </summary>
            <value>An integer index.</value>
        </member>
        <member name="P:Realms.Server.IModificationDetails.CurrentIndex">
            <summary>
            Gets the index of the modified object in the collection after the change. If the
            object has been deleted, it will return -1.
            </summary>
            <value>An integer index.</value>
        </member>
        <member name="P:Realms.Server.IModificationDetails.PreviousObject">
            <summary>
            Gets the object as it was before the change. If the object has been inserted, it will
            return <c>null</c>.
            </summary>
            <value>A <see cref="T:Realms.RealmObject"/> instance.</value>
        </member>
        <member name="P:Realms.Server.IModificationDetails.CurrentObject">
            <summary>
            Gets the object as it is after the change. If the object has been deleted, it will
            return <c>null</c>.
            </summary>
            <value>A <see cref="T:Realms.RealmObject"/> instance.</value>
        </member>
        <member name="T:Realms.Server.INotificationHandler">
            <summary>
            An interface for all notification handlers. Implement it and pass an
            instance of the implementation to <see cref="P:Realms.Server.NotifierConfiguration.Handlers"/>
            to be notified when a Realm changes.
            </summary>
        </member>
        <member name="M:Realms.Server.INotificationHandler.ShouldHandle(System.String)">
            <summary>
            A method, invoked by the <see cref="T:Realms.Server.INotifier"/> when a Realm has changed. If the handler returns
            <c>true</c>, <see cref="M:Realms.Server.INotificationHandler.HandleChangeAsync(Realms.Server.IChangeDetails)"/> will then be invoked with information
            about the change.
            </summary>
            <remarks>
            This method is invoked on the <see cref="T:Realms.Server.INotifier"/>'s worker thread, so it should return
            as soon as possible to avoid adversely affecting performance.
            <para/>
            If the handler returns <c>false</c> and no other handler wants to be notified about
            the Realm at this path, then this method will no longer will be called for Realms
            with that path. It is recommended that you always return the same value for a path
            and perform any additional handling in the <see cref="M:Realms.Server.INotificationHandler.HandleChangeAsync(Realms.Server.IChangeDetails)"/> method.
            </remarks>
            <param name="path">
            The path to the Realm that has changed. It will be a path relative to the root
            of your server.
            </param>
            <returns>
            <c>true</c> if the handler wants to handle the change, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Realms.Server.INotificationHandler.HandleChangeAsync(Realms.Server.IChangeDetails)">
            <summary>
            A method invoked by the <see cref="T:Realms.Server.INotifier"/> when a Realm has changed and
            <see cref="M:Realms.Server.INotificationHandler.ShouldHandle(System.String)"/> has returned <c>true</c>.
            </summary>
            <param name="details">
            An instance of <see cref="T:Realms.Server.IChangeDetails"/>, containing detailed information
            about the changes that have occurred in the Realm.
            </param>
            <returns>
            An awaitable task that, upon completion, signifies that the changes have been processed.
            </returns>
            <remarks>
            Handlers will be invoked sequentially in the order in which they have been supplied
            in the <see cref="P:Realms.Server.NotifierConfiguration.Handlers"/>.
            <para/>
            This method will be invoked sequentially for Realms with the same path and in parallel
            for different Realms. This means that if the processing takes a lot of time, it will
            build up a queue of changes for that Realm path but will not affect notifications from
            other Realms.
            </remarks>
        </member>
        <member name="T:Realms.Server.RegexNotificationHandler">
            <summary>
            A <see cref="T:Realms.Server.INotificationHandler"/> implementation that handles Realm changes based
            on a <see cref="T:System.Text.RegularExpressions.Regex"/>.
            </summary>
        </member>
        <member name="M:Realms.Server.RegexNotificationHandler.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Realms.Server.RegexNotificationHandler"/> class.
            </summary>
            <param name="regex">
            A regular expression that will be used to match Realm paths against.
            </param>
        </member>
        <member name="M:Realms.Server.RegexNotificationHandler.HandleChangeAsync(Realms.Server.IChangeDetails)">
            <summary>
            A method invoked by the <see cref="T:Realms.Server.INotifier"/> when a Realm has changed and
            <see cref="M:Realms.Server.RegexNotificationHandler.ShouldHandle(System.String)"/> has returned <c>true</c>.
            </summary>
            <param name="details">
            An instance of <see cref="T:Realms.Server.IChangeDetails"/>, containing detailed information
            about the changes that have occurred in the Realm.
            </param>
            <returns>
            An awaitable task that, upon completion, signifies that the changes have been processed.
            </returns>
            <remarks>
            Handlers will be invoked sequentially in the order in which they have been supplied
            in the <see cref="P:Realms.Server.NotifierConfiguration.Handlers"/>.
            <para/>
            This method will be invoked sequentially for Realms with the same path and in parallel
            for different Realms. This means that if the processing takes a lot of time, it will
            build up a queue of changes for that Realm path but will not affect notifications from
            other Realms.
            </remarks>
        </member>
        <member name="M:Realms.Server.RegexNotificationHandler.ShouldHandle(System.String)">
            <summary>
            A method, invoked by the <see cref="T:Realms.Server.INotifier"/> when a Realm has changed. If the handler returns
            <c>true</c>, <see cref="M:Realms.Server.RegexNotificationHandler.HandleChangeAsync(Realms.Server.IChangeDetails)"/> will then be invoked with information
            about the change.
            </summary>
            <remarks>
            If the handler returns <c>false</c> and no other handler wants to be notified about
            the Realm at this path, then this method will no longer will be called for Realms
            with that path. It is recommended that you always return the same value for a path
            and perform any additional handling in the <see cref="M:Realms.Server.RegexNotificationHandler.HandleChangeAsync(Realms.Server.IChangeDetails)"/> method.
            </remarks>
            <param name="path">
            The path to the Realm that has changed. It will be a path relative to the root
            of your server.
            </param>
            <returns>
            <c>true</c> if the handler wants to handle the change, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:Realms.Server.INotifier">
            <summary>
            An notifier instance that observes Realms and invokes handlers with change details.
            It can be obtained by calling <see cref="M:Realms.Server.Notifier.StartAsync(Realms.Server.NotifierConfiguration)"/>.
            </summary>
        </member>
        <member name="P:Realms.Server.INotifier.Configuration">
            <summary>
            Gets the <see cref="T:Realms.Server.NotifierConfiguration"/> that was used to create this <see cref="T:Realms.Server.INotifier"/>.
            </summary>
            <value>The Notifier's configuration.</value>
        </member>
        <member name="T:Realms.Server.Notifier">
            <summary>
            A factory class, used for creating <see cref="T:Realms.Server.INotifier"/> instances.
            </summary>
        </member>
        <member name="M:Realms.Server.Notifier.StartAsync(Realms.Server.NotifierConfiguration)">
            <summary>
            Creates a new <see cref="T:Realms.Server.INotifier"/> with the supplied <see cref="T:Realms.Server.NotifierConfiguration"/>.
            </summary>
            <param name="config">
            A <see cref="T:Realms.Server.NotifierConfiguration"/> describing the various <see cref="T:Realms.Server.INotifier"/> settings.
            </param>
            <returns>
            An awaitable task, that, upon completion, will contain the fully initialized <see cref="T:Realms.Server.INotifier"/>
            instance.
            </returns>
        </member>
        <member name="T:Realms.Server.NotifierConfiguration">
            <summary>
            A Notifier configuration specifying various settings that affect the Notifier's behavior.
            </summary>
        </member>
        <member name="P:Realms.Server.NotifierConfiguration.User">
            <summary>
            Gets the <see cref="T:Realms.Sync.User"/> used to create this <see cref="T:Realms.Server.NotifierConfiguration"/>.
            </summary>
            <value>The <see cref="T:Realms.Sync.User"/> whose <see cref="T:Realms.Realm"/>s will be synced.</value>
        </member>
        <member name="P:Realms.Server.NotifierConfiguration.Handlers">
            <summary>
            Gets or sets a collection of <see cref="T:Realms.Server.INotificationHandler"/>s that will be invoked when
            a change occurs in a Realm file.
            </summary>
            <value>The <see cref="T:System.Collections.Generic.IList`1"/> that will handle Realm changes.</value>
            <remarks>
            The members of the collection will be called sequentially in the order that they appear.
            </remarks>
        </member>
        <member name="P:Realms.Server.NotifierConfiguration.WorkingDirectory">
            <summary>
            Gets or sets the directory which the <see cref="T:Realms.Server.INotifier"/> will use to store the Realms it observes.
            </summary>
            <value>A folder on the filesystem, that your application has permissions to write to.</value>
        </member>
        <member name="P:Realms.Server.NotifierConfiguration.EncryptionKey">
            <summary>
            Gets or sets the key, used to encrypt the Realms at rest that the <see cref="T:Realms.Server.INotifier"/> observes.
            Once set, must be specified each time a notifier is started in the same working directory.
            </summary>
            <value>Full 64byte (512bit) key for AES-256 encryption.</value>
        </member>
        <member name="P:Realms.Server.NotifierConfiguration.EnableSSLValidation">
            <summary>
            Gets or sets a value indicating whether SSL certificate validation is enabled for the connection associated
            with this configuration value.
            </summary>
            <value><c>true</c> if SSL validation is enabled; otherwise, <c>false</c>. Default value is <c>true</c>.</value>
        </member>
        <member name="P:Realms.Server.NotifierConfiguration.TrustedCAPath">
            <summary>
            Gets or sets the path to the trusted root certificate(s) authority (CA) in PEM format, that should
            be used to validate the TLS connections to the Realm Object Server.
            </summary>
            <value>The path to the certificate.</value>
            <remarks>
            The file will be copied at runtime into the internal storage.
            <br/>
            It is recommended to include only the root CA you trust, and not the entire list of root CA as this file
            will be loaded at runtime. It is your responsibility to download and verify the correct PEM for the root CA
            you trust.
            <br/>
            This property is ignored on Apple platforms - you should use the KeyChain API to install your certificate
            instead.
            </remarks>
            <seealso href="https://www.openssl.org/docs/man1.0.2/ssl/SSL_CTX_load_verify_locations.html">
            OpenSSL documentation for SSL_CTX_load_verify_locations.
            </seealso>
            <seealso href="https://ccadb-public.secure.force.com/mozilla/IncludedCACertificateReport">
            Mozilla Included CA Certificate List
            </seealso>
        </member>
        <member name="M:Realms.Server.NotifierConfiguration.#ctor(Realms.Sync.User)">
            <summary>
            Initializes a new instance of the <see cref="T:Realms.Server.NotifierConfiguration"/> class.
            </summary>
            <param name="user">A valid <see cref="T:Realms.Sync.User"/> that has administrative access.</param>
        </member>
        <member name="T:Realms.CollectionNotificationsExtensions">
            <summary>
            A set of extensions methods exposing notification-related functionality over collections.
            </summary>
        </member>
        <member name="M:Realms.CollectionNotificationsExtensions.AsRealmCollection``1(System.Linq.IQueryable{``0})">
            <summary>
            A convenience method that casts <see cref="T:System.Linq.IQueryable`1"/> to <see cref="T:Realms.IRealmCollection`1"/> which
            implements <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>.
            </summary>
            <param name="results">The <see cref="T:System.Linq.IQueryable`1" /> to observe for changes.</param>
            <typeparam name="T">Type of the <see cref="T:Realms.RealmObject"/> in the results.</typeparam>
            <seealso cref="M:Realms.IRealmCollection`1.SubscribeForNotifications(Realms.NotificationCallbackDelegate{`0})"/>
            <returns>The collection, implementing <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>.</returns>
        </member>
        <member name="M:Realms.CollectionNotificationsExtensions.SubscribeForNotifications``1(System.Linq.IQueryable{``0},Realms.NotificationCallbackDelegate{``0})">
            <summary>
            A convenience method that casts <see cref="T:System.Linq.IQueryable`1"/> to <see cref="T:Realms.IRealmCollection`1"/> and subscribes for change notifications.
            </summary>
            <param name="results">The <see cref="T:System.Linq.IQueryable`1" /> to observe for changes.</param>
            <typeparam name="T">Type of the <see cref="T:Realms.RealmObject"/> in the results.</typeparam>
            <seealso cref="M:Realms.IRealmCollection`1.SubscribeForNotifications(Realms.NotificationCallbackDelegate{`0})"/>
            <param name="callback">The callback to be invoked with the updated <see cref="T:Realms.IRealmCollection`1" />.</param>
            <returns>
            A subscription token. It must be kept alive for as long as you want to receive change notifications.
            To stop receiving notifications, call <see cref="M:System.IDisposable.Dispose" />.
            </returns>
        </member>
        <member name="M:Realms.CollectionNotificationsExtensions.AsRealmCollection``1(System.Collections.Generic.IList{``0})">
            <summary>
            A convenience method that casts <see cref="T:System.Collections.Generic.IList`1"/> to <see cref="T:Realms.IRealmCollection`1"/> which implements
            <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>.
            </summary>
            <param name="list">The <see cref="T:System.Collections.Generic.IList`1" /> to observe for changes.</param>
            <typeparam name="T">Type of the objects in the list.</typeparam>
            <seealso cref="M:Realms.IRealmCollection`1.SubscribeForNotifications(Realms.NotificationCallbackDelegate{`0})"/>
            <returns>The collection, implementing <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>.</returns>
        </member>
        <member name="M:Realms.CollectionNotificationsExtensions.SubscribeForNotifications``1(System.Collections.Generic.IList{``0},Realms.NotificationCallbackDelegate{``0})">
            <summary>
            A convenience method that casts <see cref="T:System.Collections.Generic.IList`1" /> to <see cref="T:Realms.IRealmCollection`1"/> and subscribes for change notifications.
            </summary>
            <param name="list">The <see cref="T:System.Collections.Generic.IList`1" /> to observe for changes.</param>
            <typeparam name="T">Type of the objects in the list.</typeparam>
            <seealso cref="M:Realms.IRealmCollection`1.SubscribeForNotifications(Realms.NotificationCallbackDelegate{`0})"/>
            <param name="callback">The callback to be invoked with the updated <see cref="T:Realms.IRealmCollection`1" />.</param>
            <returns>
            A subscription token. It must be kept alive for as long as you want to receive change notifications.
            To stop receiving notifications, call <see cref="M:System.IDisposable.Dispose" />.
            </returns>
        </member>
        <member name="M:Realms.CollectionNotificationsExtensions.Move``1(System.Collections.Generic.IList{``0},``0,System.Int32)">
            <summary>
            Move the specified item to a new position within the list.
            </summary>
            <param name="list">The list where the move should occur.</param>
            <param name="item">The item that will be moved.</param>
            <param name="index">The new position to which the item will be moved.</param>
            <typeparam name="T">Type of the objects in the list.</typeparam>
            <remarks>
            This extension method will work for standalone lists as well by calling <see cref="M:System.Collections.Generic.ICollection`1.Remove(`0)"/>
            and then <see cref="M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)"/>.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index is less than 0 or greater than <see cref="P:System.Collections.Generic.ICollection`1.Count"/> - 1.</exception>
        </member>
        <member name="M:Realms.CollectionNotificationsExtensions.Move``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Move the specified item to a new position within the list.
            </summary>
            <param name="list">The list where the move should occur.</param>
            <param name="from">The index of the item that will be moved.</param>
            <param name="to">The new position to which the item will be moved.</param>
            <typeparam name="T">Type of the objects  in the list.</typeparam>
            <remarks>
            This extension method will work for standalone lists as well by calling <see cref="M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)"/>
            and then <see cref="M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)"/>.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index is less than 0 or greater than <see cref="P:System.Collections.Generic.ICollection`1.Count"/> - 1.</exception>
        </member>
        <member name="M:Realms.CollectionNotificationsExtensions.Filter``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            Apply an NSPredicate-based filter over a collection. It can be used to create
            more complex queries, that are currently unsupported by the LINQ provider and
            supports SORT and DISTINCT clauses in addition to filtering.
            </summary>
            <typeparam name="T">The type of the objects that will be filtered.</typeparam>
            <param name="results">
            A Queryable collection, obtained by calling <see cref="M:Realms.Realm.All``1"/>.
            </param>
            <param name="predicate">The predicate that will be applied.</param>
            <returns>A queryable observable collection of objects that match the predicate.</returns>
            <remarks>
            This method can be used in combination with LINQ filtering, but it is strongly recommended
            to avoid combining it if a <c>SORT</c> clause appears in the predicate.
            <para/>
            If you're not going to apply additional filters, it's recommended to use <see cref="M:Realms.CollectionNotificationsExtensions.AsRealmCollection``1(System.Linq.IQueryable{``0})"/>
            after applying the predicate.
            </remarks>
            <example>
            <code>
            var results1 = realm.All&lt;Foo&gt;("Bar.IntValue > 0");
            var results2 = realm.All&lt;Foo&gt;("Bar.IntValue > 0 SORT(Bar.IntValue ASC Bar.StringValue DESC)");
            var results3 = realm.All&lt;Foo&gt;("Bar.IntValue > 0 SORT(Bar.IntValue ASC Bar.StringValue DESC) DISTINCT(Bar.IntValue)");
            </code>
            </example>
            <seealso href="https://github.com/realm/realm-js/blob/master/docs/tutorials/query-language.md">
            Examples of the NSPredicate syntax
            </seealso>
            <seealso href="https://academy.realm.io/posts/nspredicate-cheatsheet/">NSPredicate Cheatsheet</seealso>
        </member>
        <member name="T:Realms.StringExtensions">
            <summary>
            A set of extensions methods over strings, useable in LINQ queries.
            </summary>
        </member>
        <member name="M:Realms.StringExtensions.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            Returns a value indicating whether a specified substring occurs within this string.
            </summary>
            <param name="str">The original string.</param>
            <param name="value">The string to seek.</param>
            <param name="comparisonType">One of the enumeration values that determines how this string and value are compared.</param>
            <returns><c>true</c> if the value parameter occurs within this string, or if value is the empty string (""); otherwise, <c>false</c></returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>str</c> or <c>value</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>comparisonType</c> is not a valid <see cref="T:System.StringComparison"/> value.</exception>
        </member>
        <member name="M:Realms.StringExtensions.Like(System.String,System.String,System.Boolean)">
            <summary>
            Performs a 'like' comparison between the specified string and pattern.
            </summary>
            <remarks>
            <c>?</c> and <c>*</c> are allowed where <c>?</c> matches a single character and <c>*</c> matches zero or
            more characters, such that <c>?bc*</c> matches <c>abcde</c> and <c>bbc</c>, but does not match <c>bcd</c>.
            <para/>
            This extension method can be used in LINQ queries against the <see cref="T:System.Linq.IQueryable"/> returned from
            <see cref="M:Realms.Realm.All(System.String)"/>. If used outside of a query context, it will use a <see cref="T:System.Text.RegularExpressions.Regex"/> to perform
            the comparison using the same rules.
            </remarks>
            <param name="str">The string to compare against the pattern.</param>
            <param name="pattern">The pattern to compare against.</param>
            <param name="caseSensitive">If set to <c>true</c> performs a case sensitive comparison.</param>
            <returns><c>true</c>  if the string matches the pattern, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Realms.QueryHandle.StringContains(System.IntPtr,System.String,System.Boolean)">
            <summary>
            If the user hasn't specified it, should be caseSensitive=true.
            </summary>
        </member>
        <member name="M:Realms.QueryHandle.StringStartsWith(System.IntPtr,System.String,System.Boolean)">
            <summary>
            If the user hasn't specified it, should be <c>caseSensitive = true</c>.
            </summary>
        </member>
        <member name="M:Realms.QueryHandle.StringEndsWith(System.IntPtr,System.String,System.Boolean)">
            <summary>
            If the user hasn't specified it, should be <c>caseSensitive = true</c>.
            </summary>
        </member>
        <member name="M:Realms.QueryHandle.StringEqual(System.IntPtr,System.String,System.Boolean)">
            <summary>
            If the user hasn't specified it, should be <c>caseSensitive = true</c>.
            </summary>
        </member>
        <member name="M:Realms.QueryHandle.StringNotEqual(System.IntPtr,System.String,System.Boolean)">
            <summary>
            If the user hasn't specified it, should be <c>caseSensitive = true</c>.
            </summary>
        </member>
        <member name="M:Realms.RealmHandle.Unbind">
            <summary>
            Override Unbind and put in code that actually calls core and unbinds whatever this handle is about.
            when this is called, it has already been verified that it is safe to call core - so just put in code that does the job.
            </summary>
        </member>
        <member name="M:Realms.RealmHandle.RequestUnbind(Realms.RealmHandle)">
            <summary>
            Called by children to this root, when they would like to
            be unbound, but are (possibly) running in a finalizer thread
            so it is (possibly) not safe to unbind then directly.
            </summary>
            <param name="handleToUnbind">The core handle that is not needed anymore and should be unbound.</param>
        </member>
        <member name="F:Realms.InteropConfig.DLL_NAME">
            <summary>
            Name of the DLL used in native declarations, constant varying per-platform.
            </summary>
        </member>
        <member name="T:Realms.ISchemaSource">
            <summary>
            An object describing its properties in terms of a <see cref="P:Realms.ISchemaSource.ObjectSchema"/>.
            </summary>
        </member>
        <member name="P:Realms.ISchemaSource.ObjectSchema">
            <summary>
            Gets the <see cref="P:Realms.ISchemaSource.ObjectSchema"/>, describing the persisted properties of the object. If the object is a
            single <see cref="T:Realms.RealmObject"/>, the schema will describe the object itself. If it is a collection, it will
            describe the contained objects.
            </summary>
            <value>The ObjectSchema of the object or contained objects.</value>
        </member>
        <member name="T:Realms.ChangeSet">
            <summary>
            A <see cref="T:Realms.ChangeSet" /> describes the changes inside a <see cref="T:Realms.IRealmCollection`1" /> since the last time the notification callback was invoked.
            </summary>
        </member>
        <member name="P:Realms.ChangeSet.InsertedIndices">
            <summary>
            Gets the indices in the new version of the <see cref="T:Realms.IRealmCollection`1" /> which were newly inserted.
            </summary>
            <value>An array, containing the indices of the inserted objects.</value>
        </member>
        <member name="P:Realms.ChangeSet.ModifiedIndices">
            <summary>
            Gets the indices in the *old* version of the <see cref="T:Realms.IRealmCollection`1"/> which were modified.
            This means that either the property of an object at that index was modified or the property of
            of an object it's related to has changed.
            </summary>
            <value>An array, containing the indices of the modified objects.</value>
        </member>
        <member name="P:Realms.ChangeSet.NewModifiedIndices">
            <summary>
            Gets the indices in the *new* version of the <see cref="T:Realms.IRealmCollection`1"/> which were modified.
            Conceptually, it contains the same entries as <see cref="P:Realms.ChangeSet.ModifiedIndices"/> but after the insertions
            and deletions have been accounted for.
            </summary>
            <value>An array, containing the indices of the modified objects.</value>
        </member>
        <member name="P:Realms.ChangeSet.DeletedIndices">
            <summary>
            Gets the indices of objects in the previous version of the <see cref="T:Realms.IRealmCollection`1"/> which have been removed from this one.
            </summary>
            <value>An array, containing the indices of the deleted objects.</value>
        </member>
        <member name="P:Realms.ChangeSet.Moves">
            <summary>
            Gets the rows in the collection which moved.
            </summary>
            <remarks>
            Every <see cref="P:Realms.ChangeSet.Move.From"/> index will be present in <see cref="P:Realms.ChangeSet.DeletedIndices"/> and every <see cref="P:Realms.ChangeSet.Move.To"/>
            index will be present in <see cref="P:Realms.ChangeSet.InsertedIndices"/>.
            </remarks>
            <value>An array of <see cref="T:Realms.ChangeSet.Move"/> structs, indicating the source and the destination index of the moved row.</value>
        </member>
        <member name="T:Realms.ChangeSet.Move">
            <summary>
            A <see cref="T:Realms.ChangeSet.Move" /> contains information about objects that moved within the same <see cref="T:Realms.IRealmCollection`1"/>.
            </summary>
        </member>
        <member name="P:Realms.ChangeSet.Move.From">
            <summary>
            Gets the index in the old version of the <see cref="T:Realms.IRealmCollection`1" /> from which the object has moved.
            </summary>
            <value>The source index of the object.</value>
        </member>
        <member name="P:Realms.ChangeSet.Move.To">
            <summary>
            Gets the index in the new version of the <see cref="T:Realms.IRealmCollection`1" /> to which the object has moved.
            </summary>
            <value>The destination index of the object.</value>
        </member>
        <member name="T:Realms.NotificationCallbackDelegate`1">
            <summary>
            A callback that will be invoked each time the contents of a <see cref="T:Realms.IRealmCollection`1"/> have changed.
            </summary>
            <param name="sender">The <see cref="T:Realms.IRealmCollection`1"/> being monitored for changes.</param>
            <param name="changes">The <see cref="T:Realms.ChangeSet"/> describing the changes to a <see cref="T:Realms.IRealmCollection`1"/>,
            or <c>null</c> if an has error occurred.</param>
            <param name="error">An exception that might have occurred while asynchronously monitoring a
            <see cref="T:Realms.IRealmCollection`1"/> for changes, or <c>null</c> if no errors have occurred.</param>
            <typeparam name="T">Type of the <see cref="T:Realms.RealmObject"/> which is being returned.</typeparam>
        </member>
        <member name="T:Realms.IRealmCollection`1">
            <summary>
            Iterable, sortable collection of one kind of RealmObject resulting from <see cref="M:Realms.Realm.All``1"/> or from a LINQ query expression.
            </summary>
            <typeparam name="T">Type of the <see cref="T:Realms.RealmObject"/> which is being returned.</typeparam>
        </member>
        <member name="M:Realms.IRealmCollection`1.IndexOf(System.Object)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first
            occurrence within the entire <see cref="T:Realms.IRealmCollection`1"/>
            </summary>
            <param name="item">
            The object to locate in the <see cref="T:Realms.IRealmCollection`1"/>.
            </param>
            <returns>
            The zero-based index of the first occurrence of item within the entire <see cref="T:Realms.IRealmCollection`1"/>,
            if found; otherwise, –1.
            </returns>
        </member>
        <member name="M:Realms.IRealmCollection`1.Contains(System.Object)">
            <summary>
            Determines whether an element is in the <see cref="T:Realms.IRealmCollection`1"/>
            </summary>
            <param name="item">
            The object to locate in the <see cref="T:Realms.IRealmCollection`1"/>.
            </param>
            <returns>true if item is found in the <see cref="T:Realms.IRealmCollection`1"/>; otherwise, false.</returns>
        </member>
        <member name="P:Realms.IRealmCollection`1.IsValid">
            <summary>
            Gets a value indicating whether this collection is still valid to use, i.e. the <see cref="T:Realms.Realm"/> instance
            hasn't been closed and, if it represents a to-many relationship, it's parent object hasn't been deleted.
            </summary>
            <value><c>true</c> if the collection is valid to use; <c>false</c> otherwise.</value>
        </member>
        <member name="M:Realms.IRealmCollection`1.SubscribeForNotifications(Realms.NotificationCallbackDelegate{`0})">
            <summary>
            Register a callback to be invoked each time this <see cref="T:Realms.IRealmCollection`1"/> changes.
            </summary>
            <remarks>
            <para>
            The callback will be asynchronously invoked with the initial <see cref="T:Realms.IRealmCollection`1" />, and then
            called again after each write transaction which changes either any of the objects in the collection, or
            which objects are in the collection. The <c>changes</c> parameter will
            be <c>null</c> the first time the callback is invoked with the initial results. For each call after that,
            it will contain information about which rows in the results were added, removed or modified.
            </para>
            <para>
            If a write transaction did not modify any objects in this <see cref="T:Realms.IRealmCollection`1" />, the callback is not invoked at all.
            If an error occurs the callback will be invoked with <c>null</c> for the <c>sender</c> parameter and a non-<c>null</c> <c>error</c>.
            Currently the only errors that can occur are when opening the <see cref="T:Realms.Realm" /> on the background worker thread.
            </para>
            <para>
            At the time when the block is called, the <see cref="T:Realms.IRealmCollection`1" /> object will be fully evaluated
            and up-to-date, and as long as you do not perform a write transaction on the same thread
            or explicitly call <see cref="M:Realms.Realm.Refresh" />, accessing it will never perform blocking work.
            </para>
            <para>
            Notifications are delivered via the standard event loop, and so can't be delivered while the event loop is blocked by other activity.
            When notifications can't be delivered instantly, multiple notifications may be coalesced into a single notification.
            This can include the notification with the initial collection.
            </para>
            </remarks>
            <param name="callback">The callback to be invoked with the updated <see cref="T:Realms.IRealmCollection`1" />.</param>
            <returns>
            A subscription token. It must be kept alive for as long as you want to receive change notifications.
            To stop receiving notifications, call <see cref="M:System.IDisposable.Dispose" />.
            </returns>
        </member>
        <member name="T:Realms.Migration">
            <summary>
            This class is given to you when you migrate your database from one version to another.
            It contains two properties: <see cref="P:Realms.Migration.OldRealm"/> and <see cref="P:Realms.Migration.NewRealm"/>.
            The <see cref="P:Realms.Migration.NewRealm"/> is the one you should make sure is up to date. It will contain
            models corresponding to the configuration you've supplied.
            You can read from the <see cref="P:Realms.Migration.OldRealm"/> and access properties that have been removed from
            the classes by using the dynamic API.
            </summary>
            <seealso href="https://realm.io/docs/xamarin/latest/#migrations">See more in the migrations section in the documentation.</seealso>
        </member>
        <member name="P:Realms.Migration.OldRealm">
            <summary>
            Gets the <see cref="T:Realms.Realm"/> as it was before migrating. Use the dynamic API to access it.
            </summary>
            <value>The <see cref="T:Realms.Realm"/> before the migration.</value>
        </member>
        <member name="P:Realms.Migration.NewRealm">
            <summary>
            Gets the <see cref="T:Realms.Realm"/> that you should modify and make sure is up to date.
            </summary>
            <value>The <see cref="T:Realms.Realm"/> that will be saved after the migration.</value>
        </member>
        <member name="T:Realms.Native.MonoPInvokeCallbackAttribute">
            <summary>
            Our own copy of MonoPInvokeCallbackAttribute to avoid the Xamarin.iOS dependency.
            </summary>
        </member>
        <member name="M:Realms.Native.SortDescriptorBuilder.Flatten">
            <summary>
            Create a flattened array of all the clauses by concatenating the lists.
            </summary>
            <returns>
            A tuple with two elements. Item1 is the concatenated list of indices. Item2 is the list of clauses,
            indicating the offset and count, as well as the ascending flag for each clause.
            </returns>
        </member>
        <member name="T:Realms.Realm">
            <summary>
            A Realm instance (also referred to as a Realm) represents a Realm database.
            </summary>
            <remarks>
            <b>Warning</b>: Realm instances are not thread safe and can not be shared across threads.
            You must call <see cref="M:Realms.Realm.GetInstance(Realms.RealmConfigurationBase)"/> on each thread in which you want to interact with the Realm.
            </remarks>
        </member>
        <member name="M:Realms.Realm.GetInstance(System.String)">
            <summary>
            Factory for obtaining a <see cref="T:Realms.Realm"/> instance for this thread.
            </summary>
            <param name="databasePath">
            Path to the realm, must be a valid full path for the current platform, relative subdirectory, or just filename.
            </param>
            <remarks>
            If you specify a relative path, sandboxing by the OS may cause failure if you specify anything other than a subdirectory.
            </remarks>
            <returns>A <see cref="T:Realms.Realm"/> instance.</returns>
            <exception cref="T:Realms.Exceptions.RealmFileAccessErrorException">
            Thrown if the file system returns an error preventing file creation.
            </exception>
        </member>
        <member name="M:Realms.Realm.GetInstance(Realms.RealmConfigurationBase)">
            <summary>
            Factory for obtaining a <see cref="T:Realms.Realm"/> instance for this thread.
            </summary>
            <param name="config">Optional configuration.</param>
            <returns>A <see cref="T:Realms.Realm"/> instance.</returns>
            <exception cref="T:Realms.Exceptions.RealmFileAccessErrorException">
            Thrown if the file system returns an error preventing file creation.
            </exception>
        </member>
        <member name="M:Realms.Realm.GetInstanceAsync(Realms.RealmConfigurationBase,System.Threading.CancellationToken)">
            <summary>
            Factory for asynchronously obtaining a <see cref="T:Realms.Realm"/> instance.
            </summary>
            <remarks>
            If the configuration points to a remote realm belonging to a Realm Object Server
            the realm will be downloaded and fully synchronized with the server prior to the completion
            of the returned Task object.
            Otherwise this method behaves identically to <see cref="M:Realms.Realm.GetInstance(Realms.RealmConfigurationBase)"/>
            and immediately returns a completed Task.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that is completed once the remote realm is fully synchronized or immediately if it's a local realm.</returns>
            <param name="config">A configuration object that describes the realm.</param>
            <param name="cancellationToken">An optional cancellation token that can be used to cancel the work.</param>
        </member>
        <member name="M:Realms.Realm.Compact(Realms.RealmConfigurationBase)">
            <summary>
            Compacts a Realm file. A Realm file usually contains free/unused space. This method removes this free space and the file size is thereby reduced. Objects within the Realm file are untouched.
            </summary>
            <remarks>
            The realm file must not be open on other threads.
            The file system should have free space for at least a copy of the Realm file.
            This method must not be called inside a transaction.
            The Realm file is left untouched if any file operation fails.
            </remarks>
            <param name="config">Optional configuration.</param>
            <returns><c>true</c> if successful, <c>false</c> if any file operation failed.</returns>
        </member>
        <member name="M:Realms.Realm.DeleteRealm(Realms.RealmConfigurationBase)">
            <summary>
            Deletes all the files associated with a realm.
            </summary>
            <param name="configuration">A <see cref="T:Realms.RealmConfigurationBase"/> which supplies the realm path.</param>
        </member>
        <member name="P:Realms.Realm.IsInTransaction">
            <summary>
            Gets a value indicating whether there is an active <see cref="T:Realms.Transaction"/> is in transaction.
            </summary>
            <value><c>true</c> if is in transaction; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Realms.Realm.Schema">
            <summary>
            Gets the <see cref="T:Realms.Schema.RealmSchema"/> instance that describes all the types that can be stored in this <see cref="T:Realms.Realm"/>.
            </summary>
            <value>The Schema of the Realm.</value>
        </member>
        <member name="P:Realms.Realm.Config">
            <summary>
            Gets the <see cref="T:Realms.RealmConfigurationBase"/> that controls this realm's path and other settings.
            </summary>
            <value>The Realm's configuration.</value>
        </member>
        <member name="T:Realms.Realm.RealmChangedEventHandler">
            <summary>
            Handler type used by <see cref="E:Realms.Realm.RealmChanged"/>
            </summary>
            <param name="sender">The <see cref="T:Realms.Realm"/> which has changed.</param>
            <param name="e">Currently an empty argument, in future may indicate more details about the change.</param>
        </member>
        <member name="E:Realms.Realm.RealmChanged">
            <summary>
            Triggered when a Realm has changed (i.e. a <see cref="T:Realms.Transaction"/> was committed).
            </summary>
        </member>
        <member name="E:Realms.Realm.Error">
            <summary>
            Triggered when a Realm-level exception has occurred.
            </summary>
        </member>
        <member name="P:Realms.Realm.IsClosed">
            <summary>
            Gets a value indicating whether the instance has been closed via <see cref="M:Realms.Realm.Dispose"/>. If <c>true</c>, you
            should not call methods on that instance.
            </summary>
            <value><c>true</c> if closed, <c>false</c> otherwise.</value>
        </member>
        <member name="M:Realms.Realm.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Realms.Realm.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Realms.Realm.IsSameInstance(Realms.Realm)">
            <summary>
            Determines whether this instance is the same core instance as the passed in argument.
            </summary>
            <remarks>
            You can, and should, have multiple instances open on different threads which have the same path and open the same Realm.
            </remarks>
            <returns><c>true</c> if this instance is the same core instance; otherwise, <c>false</c>.</returns>
            <param name="other">The Realm to compare with the current Realm.</param>
        </member>
        <member name="M:Realms.Realm.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Realms.Realm.CreateObject(System.String,System.Object)">
            <summary>
            Factory for a managed object in a realm. Only valid within a write <see cref="T:Realms.Transaction"/>.
            </summary>
            <returns>A dynamically-accessed Realm object.</returns>
            <param name="className">The type of object to create as defined in the schema.</param>
            <param name="primaryKey">
            The primary key of object to be created. If the object doesn't have primary key defined, this argument
            is ignored.
            </param>
            <exception cref="T:Realms.Exceptions.RealmInvalidTransactionException">
            If you invoke this when there is no write <see cref="T:Realms.Transaction"/> active on the <see cref="T:Realms.Realm"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If you pass <c>null</c> for an object with string primary key.
            </exception>
            <exception cref="T:System.ArgumentException">
            If you pass <c>primaryKey</c> with type that is different from the type, defined in the schema.
            </exception>
            <remarks>
            <para>
            <b>WARNING:</b> if the dynamic object has a PrimaryKey then that must be the <b>first property set</b>
            otherwise other property changes may be lost.
            </para>
            <para>
            If the realm instance has been created from an un-typed schema (such as when migrating from an older version
            of a realm) the returned object will be purely dynamic. If the realm has been created from a typed schema as
            is the default case when calling <see cref="M:Realms.Realm.GetInstance(Realms.RealmConfigurationBase)"/> the returned
            object will be an instance of a user-defined class.
            </para>
            </remarks>
        </member>
        <member name="M:Realms.Realm.Add``1(``0,System.Boolean)">
            <summary>
            This <see cref="T:Realms.Realm"/> will start managing a <see cref="T:Realms.RealmObject"/> which has been created as a standalone object.
            </summary>
            <typeparam name="T">
            The Type T must not only be a <see cref="T:Realms.RealmObject"/> but also have been processed by the Fody weaver,
            so it has persistent properties.
            </typeparam>
            <param name="obj">Must be a standalone object, <c>null</c> not allowed.</param>
            <param name="update">If <c>true</c>, and an object with the same primary key already exists, performs an update.</param>
            <exception cref="T:Realms.Exceptions.RealmInvalidTransactionException">
            If you invoke this when there is no write <see cref="T:Realms.Transaction"/> active on the <see cref="T:Realms.Realm"/>.
            </exception>
            <exception cref="T:Realms.Exceptions.RealmObjectManagedByAnotherRealmException">
            You can't manage an object with more than one <see cref="T:Realms.Realm"/>.
            </exception>
            <remarks>
            If the object is already managed by this <see cref="T:Realms.Realm"/>, this method does nothing.
            This method modifies the object in-place, meaning that after it has run, <c>obj</c> will be managed.
            Returning it is just meant as a convenience to enable fluent syntax scenarios.
            Cyclic graphs (<c>Parent</c> has <c>Child</c> that has a <c>Parent</c>) will result in undefined behavior.
            You have to break the cycle manually and assign relationships after all object have been managed.
            </remarks>
            <returns>The passed object, so that you can write <c>var person = realm.Add(new Person { Id = 1 });</c></returns>
        </member>
        <member name="M:Realms.Realm.Add(Realms.RealmObject,System.Boolean)">
            <summary>
            This <see cref="T:Realms.Realm"/> will start managing a <see cref="T:Realms.RealmObject"/> which has been created as a standalone object.
            </summary>
            <param name="obj">Must be a standalone object, <c>null</c> not allowed.</param>
            <param name="update">If <c>true</c>, and an object with the same primary key already exists, performs an update.</param>
            <exception cref="T:Realms.Exceptions.RealmInvalidTransactionException">
            If you invoke this when there is no write <see cref="T:Realms.Transaction"/> active on the <see cref="T:Realms.Realm"/>.
            </exception>
            <exception cref="T:Realms.Exceptions.RealmObjectManagedByAnotherRealmException">
            You can't manage an object with more than one <see cref="T:Realms.Realm"/>.
            </exception>
            <remarks>
            If the object is already managed by this <see cref="T:Realms.Realm"/>, this method does nothing.
            This method modifies the object in-place, meaning that after it has run, <c>obj</c> will be managed.
            Cyclic graphs (<c>Parent</c> has <c>Child</c> that has a <c>Parent</c>) will result in undefined behavior.
            You have to break the cycle manually and assign relationships after all object have been managed.
            </remarks>
            <returns>The passed object.</returns>
        </member>
        <member name="M:Realms.Realm.BeginWrite">
            <summary>
            Factory for a write <see cref="T:Realms.Transaction"/>. Essential object to create scope for updates.
            </summary>
            <example>
            <code>
            using (var trans = realm.BeginWrite())
            {
                realm.Add(new Dog
                {
                    Name = "Rex"
                });
                trans.Commit();
            }
            </code>
            </example>
            <returns>A transaction in write mode, which is required for any creation or modification of objects persisted in a <see cref="T:Realms.Realm"/>.</returns>
        </member>
        <member name="M:Realms.Realm.Write(System.Action)">
            <summary>
            Execute an action inside a temporary <see cref="T:Realms.Transaction"/>. If no exception is thrown, the <see cref="T:Realms.Transaction"/>
            will be committed.
            </summary>
            <remarks>
            Creates its own temporary <see cref="T:Realms.Transaction"/> and commits it after running the lambda passed to <c>action</c>.
            Be careful of wrapping multiple single property updates in multiple <see cref="M:Realms.Realm.Write(System.Action)"/> calls.
            It is more efficient to update several properties or even create multiple objects in a single <see cref="M:Realms.Realm.Write(System.Action)"/>,
            unless you need to guarantee finer-grained updates.
            </remarks>
            <example>
            <code>
            realm.Write(() =>
            {
                realm.Add(new Dog
                {
                    Name = "Eddie",
                    Age = 5
                });
            });
            </code>
            </example>
            <param name="action">
            Action to perform inside a <see cref="T:Realms.Transaction"/>, creating, updating or removing objects.
            </param>
        </member>
        <member name="M:Realms.Realm.WriteAsync(System.Action{Realms.Realm})">
            <summary>
            Execute an action inside a temporary <see cref="T:Realms.Transaction"/> on a worker thread, <b>if</b> called from UI thread. If no exception is thrown,
            the <see cref="T:Realms.Transaction"/> will be committed.
            </summary>
            <remarks>
            Opens a new instance of this Realm on a worker thread and executes <c>action</c> inside a write <see cref="T:Realms.Transaction"/>.
            <see cref="T:Realms.Realm"/>s and <see cref="T:Realms.RealmObject"/>s are thread-affine, so capturing any such objects in
            the <c>action</c> delegate will lead to errors if they're used on the worker thread. Note that it checks the
            <see cref="T:System.Threading.SynchronizationContext"/> to determine if <c>Current</c> is null, as a test to see if you are on the UI thread
            and will otherwise just call Write without starting a new thread. So if you know you are invoking from a worker thread, just call Write instead.
            </remarks>
            <example>
            <code>
            await realm.WriteAsync(tempRealm =&gt;
            {
                var pongo = tempRealm.All&lt;Dog&gt;().Single(d =&gt; d.Name == "Pongo");
                var missis = tempRealm.All&lt;Dog&gt;().Single(d =&gt; d.Name == "Missis");
                for (var i = 0; i &lt; 15; i++)
                {
                    tempRealm.Add(new Dog
                    {
                        Breed = "Dalmatian",
                        Mum = missis,
                        Dad = pongo
                    });
                }
            });
            </code>
            <b>Note</b> that inside the action, we use <c>tempRealm</c>.
            </example>
            <param name="action">
            Action to perform inside a <see cref="T:Realms.Transaction"/>, creating, updating, or removing objects.
            </param>
            <returns>An awaitable <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Realms.Realm.Refresh">
            <summary>
            Update the <see cref="T:Realms.Realm"/> instance and outstanding objects to point to the most recent persisted version.
            </summary>
            <returns>
            Whether the <see cref="T:Realms.Realm"/> had any updates. Note that this may return true even if no data has actually changed.
            </returns>
        </member>
        <member name="M:Realms.Realm.RefreshAsync">
            <summary>
            Asynchronously wait for the <see cref="T:Realms.Realm"/> instance and outstanding objects to get updated
            to point to the most recent persisted version.
            </summary>
            <remarks>
            On worker threads (where the SynchronizationContext) is null, this will call the blocking <see cref="M:Realms.Realm.Refresh"/>
            method instead. On the main thread (or other threads that have SynchronizationContext), this will wait until
            the instance automatically updates to resolve the task. Note that you must keep a reference to the Realm
            until the returned task is resolved.
            </remarks>
            <returns>
            Whether the <see cref="T:Realms.Realm"/> had any updates. Note that this may return true even if no data has actually changed.
            </returns>
        </member>
        <member name="M:Realms.Realm.All``1">
            <summary>
            Extract an iterable set of objects for direct use or further query.
            </summary>
            <typeparam name="T">The Type T must be a <see cref="T:Realms.RealmObject"/>.</typeparam>
            <returns>A queryable collection that without further filtering, allows iterating all objects of class T, in this <see cref="T:Realms.Realm"/>.</returns>
        </member>
        <member name="M:Realms.Realm.All(System.String)">
            <summary>
            Get a view of all the objects of a particular type.
            </summary>
            <param name="className">The type of the objects as defined in the schema.</param>
            <remarks>Because the objects inside the view are accessed dynamically, the view cannot be queried into using LINQ or other expression predicates.</remarks>
            <returns>A queryable collection that without further filtering, allows iterating all objects of className, in this realm.</returns>
        </member>
        <member name="M:Realms.Realm.Find``1(System.Nullable{System.Int64})">
            <summary>
            Fast lookup of an object from a class which has a PrimaryKey property.
            </summary>
            <typeparam name="T">The Type T must be a <see cref="T:Realms.RealmObject"/>.</typeparam>
            <param name="primaryKey">
            Primary key to be matched exactly, same as an == search.
            An argument of type <c>long?</c> works for all integer properties, supported as PrimaryKey.
            </param>
            <returns><c>null</c> or an object matching the primary key.</returns>
            <exception cref="T:Realms.Exceptions.RealmClassLacksPrimaryKeyException">
            If the <see cref="T:Realms.RealmObject"/> class T lacks <see cref="T:Realms.PrimaryKeyAttribute"/>.
            </exception>
        </member>
        <member name="M:Realms.Realm.Find``1(System.String)">
            <summary>
            Fast lookup of an object from a class which has a PrimaryKey property.
            </summary>
            <typeparam name="T">The Type T must be a <see cref="T:Realms.RealmObject"/>.</typeparam>
            <param name="primaryKey">Primary key to be matched exactly, same as an == search.</param>
            <returns><c>null</c> or an object matching the primary key.</returns>
            <exception cref="T:Realms.Exceptions.RealmClassLacksPrimaryKeyException">
            If the <see cref="T:Realms.RealmObject"/> class T lacks <see cref="T:Realms.PrimaryKeyAttribute"/>.
            </exception>
        </member>
        <member name="M:Realms.Realm.Find(System.String,System.Nullable{System.Int64})">
            <summary>
            Fast lookup of an object for dynamic use, from a class which has a PrimaryKey property.
            </summary>
            <param name="className">Name of class in dynamic situation.</param>
            <param name="primaryKey">
            Primary key to be matched exactly, same as an == search.
            An argument of type <c>long?</c> works for all integer properties, supported as PrimaryKey.
            </param>
            <returns><c>null</c> or an object matching the primary key.</returns>
            <exception cref="T:Realms.Exceptions.RealmClassLacksPrimaryKeyException">
            If the <see cref="T:Realms.RealmObject"/> class T lacks <see cref="T:Realms.PrimaryKeyAttribute"/>.
            </exception>
        </member>
        <member name="M:Realms.Realm.Find(System.String,System.String)">
            <summary>
            Fast lookup of an object for dynamic use, from a class which has a PrimaryKey property.
            </summary>
            <param name="className">Name of class in dynamic situation.</param>
            <param name="primaryKey">Primary key to be matched exactly, same as an == search.</param>
            <returns><c>null</c> or an object matching the primary key.</returns>
            <exception cref="T:Realms.Exceptions.RealmClassLacksPrimaryKeyException">
            If the <see cref="T:Realms.RealmObject"/> class T lacks <see cref="T:Realms.PrimaryKeyAttribute"/>.
            </exception>
        </member>
        <member name="M:Realms.Realm.ResolveReference``1(Realms.ThreadSafeReference.Object{``0})">
            <summary>
            Returns the same object as the one referenced when the <see cref="T:Realms.ThreadSafeReference.Object`1"/> was first created,
            but resolved for the current Realm for this thread.
            </summary>
            <param name="reference">The thread-safe reference to the thread-confined <see cref="T:Realms.RealmObject"/> to resolve in this <see cref="T:Realms.Realm"/>.</param>
            <typeparam name="T">The type of the object, contained in the reference.</typeparam>
            <returns>
            A thread-confined instance of the original <see cref="T:Realms.RealmObject"/> resolved for the current thread or <c>null</c>
            if the object has been deleted after the reference was created.
            </returns>
        </member>
        <member name="M:Realms.Realm.ResolveReference``1(Realms.ThreadSafeReference.List{``0})">
            <summary>
            Returns the same collection as the one referenced when the <see cref="T:Realms.ThreadSafeReference.List`1"/> was first created,
            but resolved for the current Realm for this thread.
            </summary>
            <param name="reference">The thread-safe reference to the thread-confined <see cref="T:System.Collections.Generic.IList`1"/> to resolve in this <see cref="T:Realms.Realm"/>.</param>
            <typeparam name="T">The type of the objects, contained in the collection.</typeparam>
            <returns>
            A thread-confined instance of the original <see cref="T:System.Collections.Generic.IList`1"/> resolved for the current thread or <c>null</c>
            if the list's parent object has been deleted after the reference was created.
            </returns>
        </member>
        <member name="M:Realms.Realm.ResolveReference``1(Realms.ThreadSafeReference.Query{``0})">
            <summary>
            Returns the same query as the one referenced when the <see cref="T:Realms.ThreadSafeReference.Query`1"/> was first created,
            but resolved for the current Realm for this thread.
            </summary>
            <param name="reference">The thread-safe reference to the thread-confined <see cref="T:System.Linq.IQueryable`1"/> to resolve in this <see cref="T:Realms.Realm"/>.</param>
            <typeparam name="T">The type of the object, contained in the query.</typeparam>
            <returns>A thread-confined instance of the original <see cref="T:System.Linq.IQueryable`1"/> resolved for the current thread.</returns>
        </member>
        <member name="M:Realms.Realm.Remove(Realms.RealmObject)">
            <summary>
            Removes a persistent object from this Realm, effectively deleting it.
            </summary>
            <param name="obj">Must be an object persisted in this Realm.</param>
            <exception cref="T:Realms.Exceptions.RealmInvalidTransactionException">
            If you invoke this when there is no write <see cref="T:Realms.Transaction"/> active on the <see cref="T:Realms.Realm"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">If <c>obj</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If you pass a standalone object.</exception>
        </member>
        <member name="M:Realms.Realm.RemoveRange``1(System.Linq.IQueryable{``0})">
            <summary>
            Remove objects matching a query from the Realm.
            </summary>
            <typeparam name="T">Type of the objects to remove.</typeparam>
            <param name="range">The query to match for.</param>
            <exception cref="T:Realms.Exceptions.RealmInvalidTransactionException">
            If you invoke this when there is no write <see cref="T:Realms.Transaction"/> active on the <see cref="T:Realms.Realm"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If <c>range</c> is not the result of <see cref="M:Realms.Realm.All``1"/> or subsequent LINQ filtering.
            </exception>
            <exception cref="T:System.ArgumentNullException">If <c>range</c> is <c>null</c>.</exception>
        </member>
        <member name="M:Realms.Realm.RemoveAll``1">
            <summary>
            Remove all objects of a type from the Realm.
            </summary>
            <typeparam name="T">Type of the objects to remove.</typeparam>
            <exception cref="T:Realms.Exceptions.RealmInvalidTransactionException">
            If you invoke this when there is no write <see cref="T:Realms.Transaction"/> active on the <see cref="T:Realms.Realm"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the type T is not part of the limited set of classes in this Realm's <see cref="P:Realms.Realm.Schema"/>.
            </exception>
        </member>
        <member name="M:Realms.Realm.RemoveAll(System.String)">
            <summary>
            Remove all objects of a type from the Realm.
            </summary>
            <param name="className">Type of the objects to remove as defined in the schema.</param>
            <exception cref="T:Realms.Exceptions.RealmInvalidTransactionException">
            If you invoke this when there is no write <see cref="T:Realms.Transaction"/> active on the <see cref="T:Realms.Realm"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If you pass <c>className</c> that does not belong to this Realm's schema.
            </exception>
        </member>
        <member name="M:Realms.Realm.RemoveAll">
            <summary>
            Remove all objects of all types managed by this Realm.
            </summary>
            <exception cref="T:Realms.Exceptions.RealmInvalidTransactionException">
            If you invoke this when there is no write <see cref="T:Realms.Transaction"/> active on the <see cref="T:Realms.Realm"/>.
            </exception>
        </member>
        <member name="M:Realms.Realm.WriteCopy(Realms.RealmConfigurationBase)">
            <summary>
            Writes a compacted copy of the Realm to the path in the specified config. If the configuration object has
            non-null <see cref="P:Realms.RealmConfigurationBase.EncryptionKey"/>, the copy will be encrypted with that key.
            </summary>
            <remarks>
            The destination file cannot already exist.
            <para/>
            If this is called from within a transaction it writes the current data, and not the data as it was when
            the last transaction was committed.
            </remarks>
            <param name="config">Configuration, specifying the path and optionally the encryption key for the copy.</param>
        </member>
        <member name="T:Realms.RealmInteger`1">
            <summary>
            A structure representing an integer value in the database. It offers API to increment the value, which produces
            correct merges during conflicts.
            </summary>
            <remarks>
            <see cref="T:Realms.RealmInteger`1"/> is implicitly convertible to and from T/>.
            <br/>
            Calling <see cref="M:Realms.RealmInteger`1.Increment"/> on a managed <see cref="T:Realms.RealmObject"/>'s property must be done in a write
            transaction. When calling <see cref="M:Realms.RealmInteger`1.Increment"/> on a <see cref="T:Realms.RealmObject"/> property, it will increment
            the property's value in the database, so the change will be reflected the next time this property is accessed.
            If the object is unmanaged, its property value will not be affected.
            </remarks>
            <typeparam name="T">
            The integer type, represented by this <see cref="T:Realms.RealmInteger`1"/>. Supported types are <see cref="T:System.Byte"/>,
            <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, and <see cref="T:System.Int64"/>.
            </typeparam>
            <seealso href="https://realm.io/docs/realm-object-server/#counters"/>
        </member>
        <member name="M:Realms.RealmInteger`1.Increment">
            <summary>
            Increments the integer value by 1. Inverse of <see cref="M:Realms.RealmInteger`1.Decrement"/>.
            </summary>
            <returns>The incremented value.</returns>
        </member>
        <member name="M:Realms.RealmInteger`1.Decrement">
            <summary>
            Decrements the integer value by 1. Inverse of <see cref="M:Realms.RealmInteger`1.Increment"/>.
            </summary>
            <returns>The decremented value.</returns>
        </member>
        <member name="M:Realms.RealmInteger`1.Increment(`0)">
            <summary>
            Increment the integer value by a specified amount.
            </summary>
            <returns>The incremented value.</returns>
            <param name="value">Value by which to increment.</param>
        </member>
        <member name="M:Realms.RealmInteger`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Realms.RealmInteger`1.Equals(`0)">
            <inheritdoc />
        </member>
        <member name="M:Realms.RealmInteger`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Realms.RealmInteger`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:Realms.RealmInteger`1.CompareTo(Realms.RealmInteger{`0})">
            <inheritdoc />
        </member>
        <member name="M:Realms.RealmInteger`1.CompareTo(`0)">
            <inheritdoc />
        </member>
        <member name="M:Realms.RealmInteger`1.ToString(System.String,System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:Realms.RealmInteger`1.op_Increment(Realms.RealmInteger{`0})">
            <inheritdoc />
        </member>
        <member name="M:Realms.RealmInteger`1.op_Decrement(Realms.RealmInteger{`0})">
            <inheritdoc />
        </member>
        <member name="M:Realms.RealmInteger`1.op_Implicit(Realms.RealmInteger{`0})~`0">
            <inheritdoc />
        </member>
        <member name="M:Realms.RealmInteger`1.op_Implicit(`0)~Realms.RealmInteger{`0}">
            <inheritdoc />
        </member>
        <member name="M:Realms.RealmInteger`1.op_Equality(Realms.RealmInteger{`0},Realms.RealmInteger{`0})">
            <inheritdoc />
        </member>
        <member name="M:Realms.RealmInteger`1.op_Inequality(Realms.RealmInteger{`0},Realms.RealmInteger{`0})">
            <inheritdoc />
        </member>
        <member name="T:Realms.RealmList`1">
            <summary>
            Return type for a managed object property when you declare a to-many relationship with IList.
            </summary>
            <remarks>Relationships are ordered and preserve their order, hence the ability to use ordinal
            indexes in calls such as Insert and RemoveAt.
            </remarks>
            <remarks>Although originally used in declarations, whilst that still compiles,
            it is <b>not</b> recommended as the IList approach both supports standalone objects and is
            implemented with a faster binding.
            </remarks>
            <typeparam name="T">Type of the RealmObject which is the target of the relationship.</typeparam>
        </member>
        <member name="T:Realms.RealmObject">
            <summary>
            Base for any object that can be persisted in a <see cref="P:Realms.RealmObject.Realm"/>.
            </summary>
        </member>
        <member name="E:Realms.RealmObject.PropertyChanged">
            <inheritdoc />
        </member>
        <member name="P:Realms.RealmObject.IsManaged">
            <summary>
            Gets a value indicating whether the object has been associated with a Realm, either at creation or via
            <see cref="M:Realms.Realm.Add(Realms.RealmObject,System.Boolean)"/>.
            </summary>
            <value><c>true</c> if object belongs to a Realm; <c>false</c> if standalone.</value>
        </member>
        <member name="P:Realms.RealmObject.IsValid">
            <summary>
            Gets a value indicating whether this object is managed and represents a row in the database.
            If a managed object has been removed from the Realm, it is no longer valid and accessing properties on it
            will throw an exception.
            Unmanaged objects are always considered valid.
            </summary>
            <value><c>true</c> if managed and part of the Realm or unmanaged; <c>false</c> if managed but deleted.</value>
        </member>
        <member name="P:Realms.RealmObject.Realm">
            <summary>
            Gets the <see cref="P:Realms.RealmObject.Realm"/> instance this object belongs to, or <c>null</c> if it is unmanaged.
            </summary>
            <value>The <see cref="P:Realms.RealmObject.Realm"/> instance this object belongs to.</value>
        </member>
        <member name="P:Realms.RealmObject.ObjectSchema">
            <summary>
            Gets the <see cref="T:Realms.Schema.ObjectSchema"/> instance that describes how the <see cref="P:Realms.RealmObject.Realm"/> this object belongs to sees it.
            </summary>
            <value>A collection of properties describing the underlying schema of this object.</value>
        </member>
        <member name="P:Realms.RealmObject.BacklinksCount">
            <summary>
            Gets the number of objects referring to this one via either a to-one or to-many relationship.
            </summary>
            <remarks>
            This property is not observable so the <see cref="E:Realms.RealmObject.PropertyChanged"/> event will not fire when its value changes.
            </remarks>
        </member>
        <member name="M:Realms.RealmObject.Finalize">
            <inheritdoc/>
        </member>
        <member name="M:Realms.RealmObject.GetBacklinks(System.String,System.String)">
            <summary>
            Returns all the objects that link to this object in the specified relationship.
            </summary>
            <param name="objectType">The type of the object that is on the other end of the relationship.</param>
            <param name="property">The property that is on the other end of the relationship.</param>
            <returns>A queryable collection containing all objects of <c>objectType</c> that link to the current object via <c>property</c>.</returns>
        </member>
        <member name="M:Realms.RealmObject.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Realms.RealmObject.RaisePropertyChanged(System.String)">
            <summary>
            Allows you to raise the PropertyChanged event.
            </summary>
            <param name="propertyName">The name of the property that has changed. If not specified, we'll use the caller name.</param>
        </member>
        <member name="M:Realms.RealmObject.OnPropertyChanged(System.String)">
            <summary>
            Called when a property has changed on this class.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <remarks>
            For this method to be called, you need to have first subscribed to <see cref="E:Realms.RealmObject.PropertyChanged"/>.
            This can be used to react to changes to the current object, e.g. raising <see cref="E:Realms.RealmObject.PropertyChanged"/> for computed properties.
            </remarks>
            <example>
            <code>
            class MyClass : RealmObject
            {
                public int StatusCodeRaw { get; set; }
                public StatusCodeEnum StatusCode => (StatusCodeEnum)StatusCodeRaw;
                protected override void OnPropertyChanged(string propertyName)
                {
                    if (propertyName == nameof(StatusCodeRaw))
                    {
                        RaisePropertyChanged(nameof(StatusCode));
                    }
                }
            }
            </code>
            Here, we have a computed property that depends on a persisted one. In order to notify any <see cref="E:Realms.RealmObject.PropertyChanged"/>
            subscribers that <c>StatusCode</c> has changed, we override <see cref="M:Realms.RealmObject.OnPropertyChanged(System.String)"/> and
            raise <see cref="E:Realms.RealmObject.PropertyChanged"/> manually by calling <see cref="M:Realms.RealmObject.RaisePropertyChanged(System.String)"/>.
            </example>
        </member>
        <member name="M:Realms.RealmObject.OnManaged">
            <summary>
            Called when the object has been managed by a Realm.
            </summary>
            <remarks>
            This method will be called either when a managed object is materialized or when an unmanaged object has been
            added to the Realm. It can be useful for providing some initialization logic as when the constructor is invoked,
            it is not yet clear whether the object is managed or not.
            </remarks>
        </member>
        <member name="M:Realms.RealmObject.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Realms.Schema.ObjectSchema">
            <summary>
            Public description of a class stored in a Realm, as a collection of managed Property objects.
            </summary>
        </member>
        <member name="P:Realms.Schema.ObjectSchema.Name">
            <summary>
            Gets the name of the original class declaration from which the schema was built.
            </summary>
            <value>The name of the class.</value>
        </member>
        <member name="P:Realms.Schema.ObjectSchema.Count">
            <summary>
            Gets the number of properties in the schema, which is the persistent properties from the original class.
            </summary>
            <value>The number of persistent properties for the object.</value>
        </member>
        <member name="M:Realms.Schema.ObjectSchema.TryFindProperty(System.String,Realms.Schema.Property@)">
            <summary>
            Looks for a <see cref="T:Realms.Schema.Property"/> by <see cref="P:Realms.Schema.Property.Name"/>.
            Failure to find means it is not regarded as a property to persist in a <see cref="T:Realms.Realm"/>.
            </summary>
            <returns><c>true</c>, if a <see cref="T:Realms.Schema.Property"/> was found matching <see cref="P:Realms.Schema.Property.Name"/>;
            <c>false</c> otherwise.</returns>
            <param name="name"><see cref="P:Realms.Schema.Property.Name"/> of the <see cref="T:Realms.Schema.Property"/> to match exactly.</param>
            <param name="property"><see cref="T:Realms.Schema.Property"/> returned only if found matching Name.</param>
        </member>
        <member name="M:Realms.Schema.ObjectSchema.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Realms.Schema.ObjectSchema.FromType(System.Reflection.TypeInfo)">
            <summary>
            Creates a schema describing a <see cref="T:Realms.RealmObject"/> subclass in terms of its persisted members.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown if no class Type is provided or if it doesn't descend directly from <see cref="T:Realms.RealmObject"/>.
            </exception>
            <returns>An <see cref="T:Realms.Schema.ObjectSchema"/> describing the specified Type.</returns>
            <param name="type">Type of a <see cref="T:Realms.RealmObject"/> descendant for which you want a schema.</param>
        </member>
        <member name="T:Realms.Schema.Property">
            <summary>
            Describes a single property of a class stored in a <see cref="T:Realms.Realm"/>.
            </summary>
        </member>
        <member name="P:Realms.Schema.Property.Name">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:Realms.Schema.Property.Type">
            <summary>
            Gets or sets the type of the property.
            </summary>
            <value>The type of the property.</value>
        </member>
        <member name="P:Realms.Schema.Property.ObjectType">
            <summary>
            Gets or sets the type of the object.
            </summary>
            <value>The type of the object.</value>
        </member>
        <member name="P:Realms.Schema.Property.LinkOriginPropertyName">
            <summary>
            Gets or sets the name of the property that links to the model containing this
            <see cref="F:Realms.Schema.PropertyType.LinkingObjects"/> property.
            </summary>
            <value>The name of the linking property.</value>
        </member>
        <member name="P:Realms.Schema.Property.IsPrimaryKey">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Realms.Schema.Property"/> is primary key.
            </summary>
            <value>
            <c>true</c> if the property is primary key (the matching property in the class definition is
            marked with <see cref="T:Realms.PrimaryKeyAttribute"/>); <c>false</c> otherwise.</value>
        </member>
        <member name="P:Realms.Schema.Property.IsIndexed">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Realms.Schema.Property"/> is indexed.
            </summary>
            <value>
            <c>true</c> if the property should be indexed (the matching property in the class definition is
            marked with <see cref="T:Realms.IndexedAttribute"/>); <c>false</c> otherwise.</value>
        </member>
        <member name="T:Realms.Schema.PropertyType">
            <summary>
            An enum, containing the possible property types.
            </summary>
        </member>
        <member name="F:Realms.Schema.PropertyType.Int">
            <summary>
            Integer property, combining all integral types.
            </summary>
        </member>
        <member name="F:Realms.Schema.PropertyType.Bool">
            <summary>
            Boolean property.
            </summary>
        </member>
        <member name="F:Realms.Schema.PropertyType.String">
            <summary>
            String property.
            </summary>
        </member>
        <member name="F:Realms.Schema.PropertyType.Data">
            <summary>
            Binary data (byte[]) property.
            </summary>
        </member>
        <member name="F:Realms.Schema.PropertyType.Date">
            <summary>
            DateTimeOffset property.
            </summary>
        </member>
        <member name="F:Realms.Schema.PropertyType.Float">
            <summary>
            32 bit floating point property.
            </summary>
        </member>
        <member name="F:Realms.Schema.PropertyType.Double">
            <summary>
            64 bit floating point property.
            </summary>
        </member>
        <member name="F:Realms.Schema.PropertyType.Object">
            <summary>
            Related object property, representing a one-to-one or many-to-one relationship.
            </summary>
        </member>
        <member name="F:Realms.Schema.PropertyType.LinkingObjects">
            <summary>
            A collection of objects linking to the model owning this property.
            </summary>
        </member>
        <member name="F:Realms.Schema.PropertyType.Required">
            <summary>
            A required property. Can be combined with other values.
            </summary>
        </member>
        <member name="F:Realms.Schema.PropertyType.Nullable">
            <summary>
            A nullable (optional) property. Can be combined with other values.
            </summary>
        </member>
        <member name="F:Realms.Schema.PropertyType.Array">
            <summary>
            A collection. Can be combined with other values.
            </summary>
        </member>
        <member name="F:Realms.Schema.PropertyType.Flags">
            <summary>
            Metadata flags.
            </summary>
        </member>
        <member name="T:Realms.Schema.RealmSchema">
            <summary>
            Describes the complete set of classes which may be stored in a Realm, either from assembly declarations or,
            dynamically, by evaluating a Realm from disk.
            </summary>
            <remarks>
            By default this will be all the <see cref="T:Realms.RealmObject"/>s in all your assemblies unless you restrict with
            <see cref="P:Realms.RealmConfigurationBase.ObjectClasses"/>. Just because a given class <em>may</em> be stored in a
            Realm doesn't imply much overhead. There will be a small amount of metadata but objects only start to
            take up space once written.
            </remarks>
        </member>
        <member name="M:Realms.Schema.RealmSchema.AddDefaultTypes(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Adds a collection of types to the default schema.
            </summary>
            <param name="types">Types to be added to the default schema.</param>
            <exception cref="T:System.NotSupportedException">Thrown if the schema has already materialized.</exception>
        </member>
        <member name="P:Realms.Schema.RealmSchema.Count">
            <summary>
            Gets the number of known classes in the schema.
            </summary>
            <value>The number of known classes.</value>
        </member>
        <member name="M:Realms.Schema.RealmSchema.Find(System.String)">
            <summary>
            Finds the definition of a class in this schema.
            </summary>
            <param name="name">A valid class name which may be in this schema.</param>
            <exception cref="T:System.ArgumentException">Thrown if a name is not supplied.</exception>
            <returns>An <see cref="T:Realms.Schema.ObjectSchema"/> or <c>null</c> to indicate not found.</returns>
        </member>
        <member name="M:Realms.Schema.RealmSchema.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:Realms.ThreadSafeReference">
            <summary>
            An object intended to be passed between threads containing a thread-safe reference to its
            thread-confined object.
            <para/>
            To resolve a thread-safe reference on a target <see cref="T:Realms.Realm"/> on a different thread, pass it to
            <c>Realm.ResolveReference</c>.
            </summary>
            <remarks>
            A <see cref="T:Realms.ThreadSafeReference"/> object must be resolved at most once.
            <para/>
            Failing to resolve a <see cref="T:Realms.ThreadSafeReference"/> will result in the source version of the
            Realm being pinned until the reference is deallocated.
            <para/>
            Prefer short-lived <see cref="T:Realms.ThreadSafeReference"/>s as the data for the version of the source Realm
            will be retained until all references have been resolved or deallocated.
            </remarks>
        </member>
        <member name="M:Realms.ThreadSafeReference.Create``1(System.Linq.IQueryable{``0})">
            <summary>
            Initializes a new instance of the <see cref="T:Realms.ThreadSafeReference.Query`1"/> class.
            </summary>
            <param name="value">
            The thread-confined <see cref="T:System.Linq.IQueryable`1"/> to create a thread-safe reference to. It must be a collection,
            obtained by calling <see cref="M:Realms.Realm.All(System.String)"/> or a subsequent LINQ query.
            </param>
            <typeparam name="T">The type of the <see cref="T:Realms.RealmObject"/> contained in the query.</typeparam>
            <returns>A <see cref="T:Realms.ThreadSafeReference"/> that can be passed to <c>Realm.ResolveReference(ThreadSafeReference.Query)</c> on a different thread.</returns>
        </member>
        <member name="M:Realms.ThreadSafeReference.Create``1(``0)">
            <summary>
            Initializes a new instance of the <see cref="T:Realms.ThreadSafeReference.Object`1"/> class.
            </summary>
            <param name="value">The thread-confined <see cref="T:Realms.RealmObject"/> to create a thread-safe reference to.</param>
            <typeparam name="T">The type of the <see cref="T:Realms.RealmObject"/>.</typeparam>
            <returns>A <see cref="T:Realms.ThreadSafeReference"/> that can be passed to <c>Realm.ResolveReference(ThreadSafeReference.Object)</c> on a different thread.</returns>
        </member>
        <member name="M:Realms.ThreadSafeReference.Create``1(System.Collections.Generic.IList{``0})">
            <summary>
            Initializes a new instance of the <see cref="T:Realms.ThreadSafeReference.List`1"/> class.
            </summary>
            <param name="value">
            The thread-confined <see cref="T:System.Collections.Generic.IList`1"/> to create a thread-safe reference to. It must be a collection
            representing to-many relationship as a property of a <see cref="T:Realms.RealmObject"/>
            </param>
            <typeparam name="T">The type of the objects contained in the list.</typeparam>
            <returns>A <see cref="T:Realms.ThreadSafeReference"/> that can be passed to <c>Realm.ResolveReference(ThreadSafeReference.List)</c> on a different thread.</returns>
        </member>
        <member name="T:Realms.ThreadSafeReference.Query`1">
            <summary>
            A reference to a <see cref="T:System.Linq.IQueryable`1"/> intended to be passed between threads.
            <para/>
            To resolve a thread-safe reference on a target <see cref="T:Realms.Realm"/> on a different thread, pass it to
            <c>Realm.ResolveReference(ThreadSafeReference.Query)</c>.
            </summary>
            <remarks>
            A <see cref="T:Realms.ThreadSafeReference"/> object must be resolved at most once.
            <para/>
            Failing to resolve a <see cref="T:Realms.ThreadSafeReference"/> will result in the source version of the
            Realm being pinned until the reference is deallocated.
            <para/>
            Prefer short-lived <see cref="T:Realms.ThreadSafeReference"/>s as the data for the version of the source Realm
            will be retained until all references have been resolved or deallocated.
            </remarks>
            <typeparam name="T">The type of the <see cref="T:Realms.RealmObject"/> contained in the query.</typeparam>
        </member>
        <member name="T:Realms.ThreadSafeReference.Object`1">
            <summary>
            A reference to a <see cref="T:Realms.RealmObject"/> intended to be passed between threads.
            <para/>
            To resolve a thread-safe reference on a target <see cref="T:Realms.Realm"/> on a different thread, pass it to
            <c>Realm.ResolveReference(ThreadSafeReference.Object)</c>.
            </summary>
            <remarks>
            A <see cref="T:Realms.ThreadSafeReference"/> object must be resolved at most once.
            <para/>
            Failing to resolve a <see cref="T:Realms.ThreadSafeReference"/> will result in the source version of the
            Realm being pinned until the reference is deallocated.
            <para/>
            Prefer short-lived <see cref="T:Realms.ThreadSafeReference"/>s as the data for the version of the source Realm
            will be retained until all references have been resolved or deallocated.
            </remarks>
            <typeparam name="T">The type of the <see cref="T:Realms.RealmObject"/>.</typeparam>
        </member>
        <member name="T:Realms.ThreadSafeReference.List`1">
            <summary>
            A reference to a <see cref="T:System.Collections.Generic.IList`1"/> intended to be passed between threads.
            <para/>
            To resolve a thread-safe reference on a target <see cref="T:Realms.Realm"/> on a different thread, pass it to
            <c>Realm.ResolveReference(ThreadSafeReference.List)</c>.
            </summary>
            <remarks>
            A <see cref="T:Realms.ThreadSafeReference"/> object must be resolved at most once.
            <para/>
            Failing to resolve a <see cref="T:Realms.ThreadSafeReference"/> will result in the source version of the
            Realm being pinned until the reference is deallocated.
            <para/>
            Prefer short-lived <see cref="T:Realms.ThreadSafeReference"/>s as the data for the version of the source Realm
            will be retained until all references have been resolved or deallocated.
            </remarks>
            <typeparam name="T">The type of the objects contained in the list.</typeparam>
        </member>
        <member name="T:Realms.Transaction">
            <summary>
            Provides a scope to safely read and write to a <see cref="T:Realms.Realm"/>. Must use explicitly via <see cref="M:Realms.Realm.BeginWrite"/>.
            </summary>
            <remarks>
            All access to a <see cref="T:Realms.Realm"/> occurs within a <see cref="T:Realms.Transaction"/>. Read transactions are created implicitly.
            </remarks>
        </member>
        <member name="M:Realms.Transaction.Dispose">
            <summary>
            Will automatically <see cref="M:Realms.Transaction.Rollback"/> the transaction on existing scope, if not explicitly Committed.
            </summary>
        </member>
        <member name="M:Realms.Transaction.Rollback">
            <summary>
            Use explicitly to undo the changes in a <see cref="T:Realms.Transaction"/>, otherwise it is automatically invoked by
            exiting the block.
            </summary>
        </member>
        <member name="M:Realms.Transaction.Commit">
            <summary>
            Use to save the changes to the realm. If <see cref="T:Realms.Transaction"/> is declared in a <c>using</c> block,
            must be used before the end of that block.
            </summary>
        </member>
        <member name="T:Realms.Weaving.IRealmObjectHelper">
            <summary>
            A helper class for internal use. Helper classes are generated automatically and provide strongly typed class-specific convenience methods.
            </summary>
        </member>
        <member name="M:Realms.Weaving.IRealmObjectHelper.CreateInstance">
            <summary>
            Creates an instance of a RealmObject.
            </summary>
            <returns>The RealmObject.</returns>
        </member>
        <member name="M:Realms.Weaving.IRealmObjectHelper.CopyToRealm(Realms.RealmObject,System.Boolean,System.Boolean)">
            <summary>
            A strongly typed, optimized method to add a RealmObject to the realm.
            </summary>
            <param name="instance">The RealmObject to add.</param>
            <param name="update">If set to <c>true</c>, update the existing value (if any). Otherwise, try to add and throw if an object with the same primary key already exists.</param>
            <param name="skipDefaults">
            If set to <c>true</c> will not invoke the setters of properties that have default values. 
            Generally, should be <c>true</c> for newly created objects and <c>false</c> when updating existing ones.
            </param>
        </member>
        <member name="M:Realms.Weaving.IRealmObjectHelper.TryGetPrimaryKeyValue(Realms.RealmObject,System.Object@)">
            <summary>
            Tries the get primary key value from a RealmObject.
            </summary>
            <returns><c>true</c>, if the class has primary key, <c>false</c> otherwise.</returns>
            <param name="instance">The RealmObject instance.</param>
            <param name="value">The value of the primary key.</param>
        </member>
    </members>
</doc>
